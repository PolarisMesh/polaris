// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/polarismesh/polaris-server/common/model"
	store "github.com/polarismesh/polaris-server/store"
	reflect "reflect"
	time "time"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockStore) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockStoreMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStore)(nil).Name))
}

// Initialize mocks base method
func (m *MockStore) Initialize(c *store.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockStoreMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockStore)(nil).Initialize), c)
}

// Destroy mocks base method
func (m *MockStore) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy
func (mr *MockStoreMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockStore)(nil).Destroy))
}

// CreateTransaction mocks base method
func (m *MockStore) CreateTransaction() (store.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction")
	ret0, _ := ret[0].(store.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction
func (mr *MockStoreMockRecorder) CreateTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction))
}

// AddNamespace mocks base method
func (m *MockStore) AddNamespace(namespace *model.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamespace", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNamespace indicates an expected call of AddNamespace
func (mr *MockStoreMockRecorder) AddNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamespace", reflect.TypeOf((*MockStore)(nil).AddNamespace), namespace)
}

// UpdateNamespace mocks base method
func (m *MockStore) UpdateNamespace(namespace *model.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNow 获取当前时间
func (m *MockStore) GetNow() (int64, error) {
	return time.Now().Unix(), nil
}

// UpdateNamespace indicates an expected call of UpdateNamespace
func (mr *MockStoreMockRecorder) UpdateNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockStore)(nil).UpdateNamespace), namespace)
}

// UpdateNamespaceToken mocks base method
func (m *MockStore) UpdateNamespaceToken(name, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceToken", name, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNamespaceToken indicates an expected call of UpdateNamespaceToken
func (mr *MockStoreMockRecorder) UpdateNamespaceToken(name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceToken", reflect.TypeOf((*MockStore)(nil).UpdateNamespaceToken), name, token)
}

// ListNamespaces mocks base method
func (m *MockStore) ListNamespaces(owner string) ([]*model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces", owner)
	ret0, _ := ret[0].([]*model.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces
func (mr *MockStoreMockRecorder) ListNamespaces(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockStore)(nil).ListNamespaces), owner)
}

// GetNamespace mocks base method
func (m *MockStore) GetNamespace(name string) (*model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", name)
	ret0, _ := ret[0].(*model.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockStoreMockRecorder) GetNamespace(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockStore)(nil).GetNamespace), name)
}

// GetNamespaces mocks base method
func (m *MockStore) GetNamespaces(filter map[string][]string, offset, limit int) ([]*model.Namespace, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", filter, offset, limit)
	ret0, _ := ret[0].([]*model.Namespace)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNamespaces indicates an expected call of GetNamespaces
func (mr *MockStoreMockRecorder) GetNamespaces(filter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockStore)(nil).GetNamespaces), filter, offset, limit)
}

// GetMoreNamespaces mocks base method
func (m *MockStore) GetMoreNamespaces(mtime time.Time) ([]*model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreNamespaces", mtime)
	ret0, _ := ret[0].([]*model.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreNamespaces indicates an expected call of GetMoreNamespaces
func (mr *MockStoreMockRecorder) GetMoreNamespaces(mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreNamespaces", reflect.TypeOf((*MockStore)(nil).GetMoreNamespaces), mtime)
}

// AddBusiness mocks base method
func (m *MockStore) AddBusiness(business *model.Business) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBusiness", business)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBusiness indicates an expected call of AddBusiness
func (mr *MockStoreMockRecorder) AddBusiness(business interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBusiness", reflect.TypeOf((*MockStore)(nil).AddBusiness), business)
}

// DeleteBusiness mocks base method
func (m *MockStore) DeleteBusiness(bid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBusiness", bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBusiness indicates an expected call of DeleteBusiness
func (mr *MockStoreMockRecorder) DeleteBusiness(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBusiness", reflect.TypeOf((*MockStore)(nil).DeleteBusiness), bid)
}

// UpdateBusiness mocks base method
func (m *MockStore) UpdateBusiness(business *model.Business) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusiness", business)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBusiness indicates an expected call of UpdateBusiness
func (mr *MockStoreMockRecorder) UpdateBusiness(business interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusiness", reflect.TypeOf((*MockStore)(nil).UpdateBusiness), business)
}

// UpdateBusinessToken mocks base method
func (m *MockStore) UpdateBusinessToken(bid, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessToken", bid, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBusinessToken indicates an expected call of UpdateBusinessToken
func (mr *MockStoreMockRecorder) UpdateBusinessToken(bid, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessToken", reflect.TypeOf((*MockStore)(nil).UpdateBusinessToken), bid, token)
}

// ListBusiness mocks base method
func (m *MockStore) ListBusiness(owner string) ([]*model.Business, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBusiness", owner)
	ret0, _ := ret[0].([]*model.Business)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBusiness indicates an expected call of ListBusiness
func (mr *MockStoreMockRecorder) ListBusiness(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBusiness", reflect.TypeOf((*MockStore)(nil).ListBusiness), owner)
}

// GetBusinessByID mocks base method
func (m *MockStore) GetBusinessByID(id string) (*model.Business, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessByID", id)
	ret0, _ := ret[0].(*model.Business)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessByID indicates an expected call of GetBusinessByID
func (mr *MockStoreMockRecorder) GetBusinessByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessByID", reflect.TypeOf((*MockStore)(nil).GetBusinessByID), id)
}

// GetMoreBusiness mocks base method
func (m *MockStore) GetMoreBusiness(mtime time.Time) ([]*model.Business, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreBusiness", mtime)
	ret0, _ := ret[0].([]*model.Business)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreBusiness indicates an expected call of GetMoreBusiness
func (mr *MockStoreMockRecorder) GetMoreBusiness(mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreBusiness", reflect.TypeOf((*MockStore)(nil).GetMoreBusiness), mtime)
}

// AddService mocks base method
func (m *MockStore) AddService(service *model.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddService indicates an expected call of AddService
func (mr *MockStoreMockRecorder) AddService(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockStore)(nil).AddService), service)
}

// DeleteService mocks base method
func (m *MockStore) DeleteService(id, serviceName, namespaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", id, serviceName, namespaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockStoreMockRecorder) DeleteService(id, serviceName, namespaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockStore)(nil).DeleteService), id, serviceName, namespaceName)
}

// DeleteServiceAlias mocks base method
func (m *MockStore) DeleteServiceAlias(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAlias", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAlias indicates an expected call of DeleteServiceAlias
func (mr *MockStoreMockRecorder) DeleteServiceAlias(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAlias", reflect.TypeOf((*MockStore)(nil).DeleteServiceAlias), name, namespace)
}

// UpdateServiceAlias mocks base method
func (m *MockStore) UpdateServiceAlias(alias *model.Service, needUpdateOwner bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceAlias", alias, needUpdateOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceAlias indicates an expected call of UpdateServiceAlias
func (mr *MockStoreMockRecorder) UpdateServiceAlias(alias, needUpdateOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAlias", reflect.TypeOf((*MockStore)(nil).UpdateServiceAlias), alias, needUpdateOwner)
}

// UpdateService mocks base method
func (m *MockStore) UpdateService(service *model.Service, needUpdateOwner bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", service, needUpdateOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateService indicates an expected call of UpdateService
func (mr *MockStoreMockRecorder) UpdateService(service, needUpdateOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockStore)(nil).UpdateService), service, needUpdateOwner)
}

// UpdateServiceToken mocks base method
func (m *MockStore) UpdateServiceToken(serviceID, token, revision string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceToken", serviceID, token, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceToken indicates an expected call of UpdateServiceToken
func (mr *MockStoreMockRecorder) UpdateServiceToken(serviceID, token, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceToken", reflect.TypeOf((*MockStore)(nil).UpdateServiceToken), serviceID, token, revision)
}

// GetSourceServiceToken mocks base method
func (m *MockStore) GetSourceServiceToken(name, namespace string) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceServiceToken", name, namespace)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceServiceToken indicates an expected call of GetSourceServiceToken
func (mr *MockStoreMockRecorder) GetSourceServiceToken(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceServiceToken", reflect.TypeOf((*MockStore)(nil).GetSourceServiceToken), name, namespace)
}

// GetService mocks base method
func (m *MockStore) GetService(name, namespace string) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", name, namespace)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockStoreMockRecorder) GetService(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockStore)(nil).GetService), name, namespace)
}

// GetServiceByID mocks base method
func (m *MockStore) GetServiceByID(id string) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByID", id)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByID indicates an expected call of GetServiceByID
func (mr *MockStoreMockRecorder) GetServiceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByID", reflect.TypeOf((*MockStore)(nil).GetServiceByID), id)
}

// GetServices mocks base method
func (m *MockStore) GetServices(serviceFilters, serviceMetas map[string]string, instanceFilters *store.InstanceArgs, offset, limit uint32) (uint32, []*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", serviceFilters, serviceMetas, instanceFilters, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.Service)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServices indicates an expected call of GetServices
func (mr *MockStoreMockRecorder) GetServices(serviceFilters, serviceMetas, instanceFilters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockStore)(nil).GetServices), serviceFilters, serviceMetas, instanceFilters, offset, limit)
}

// GetServicesCount mocks base method
func (m *MockStore) GetServicesCount() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesCount")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesCount indicates an expected call of GetServicesCount
func (mr *MockStoreMockRecorder) GetServicesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesCount", reflect.TypeOf((*MockStore)(nil).GetServicesCount))
}

// GetMoreServices mocks base method
func (m *MockStore) GetMoreServices(mtime time.Time, firstUpdate, disableBusiness, needMeta bool) (map[string]*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreServices", mtime, firstUpdate, disableBusiness, needMeta)
	ret0, _ := ret[0].(map[string]*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreServices indicates an expected call of GetMoreServices
func (mr *MockStoreMockRecorder) GetMoreServices(mtime, firstUpdate, disableBusiness, needMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreServices", reflect.TypeOf((*MockStore)(nil).GetMoreServices), mtime, firstUpdate, disableBusiness, needMeta)
}

// GetServiceAliases mocks base method
func (m *MockStore) GetServiceAliases(filter map[string]string, offset, limit uint32) (uint32, []*model.ServiceAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAliases", filter, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.ServiceAlias)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServiceAliases indicates an expected call of GetServiceAliases
func (mr *MockStoreMockRecorder) GetServiceAliases(filter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAliases", reflect.TypeOf((*MockStore)(nil).GetServiceAliases), filter, offset, limit)
}

// GetSystemServices mocks base method
func (m *MockStore) GetSystemServices() ([]*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemServices")
	ret0, _ := ret[0].([]*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemServices indicates an expected call of GetSystemServices
func (mr *MockStoreMockRecorder) GetSystemServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemServices", reflect.TypeOf((*MockStore)(nil).GetSystemServices))
}

// GetServicesBatch mocks base method
func (m *MockStore) GetServicesBatch(services []*model.Service) ([]*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesBatch", services)
	ret0, _ := ret[0].([]*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesBatch indicates an expected call of GetServicesBatch
func (mr *MockStoreMockRecorder) GetServicesBatch(services interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesBatch", reflect.TypeOf((*MockStore)(nil).GetServicesBatch), services)
}

// AddInstance mocks base method
func (m *MockStore) AddInstance(instance *model.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInstance", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInstance indicates an expected call of AddInstance
func (mr *MockStoreMockRecorder) AddInstance(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstance", reflect.TypeOf((*MockStore)(nil).AddInstance), instance)
}

// BatchAddInstances mocks base method
func (m *MockStore) BatchAddInstances(instances []*model.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddInstances", instances)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAddInstances indicates an expected call of BatchAddInstances
func (mr *MockStoreMockRecorder) BatchAddInstances(instances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddInstances", reflect.TypeOf((*MockStore)(nil).BatchAddInstances), instances)
}

// UpdateInstance mocks base method
func (m *MockStore) UpdateInstance(instance *model.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstance indicates an expected call of UpdateInstance
func (mr *MockStoreMockRecorder) UpdateInstance(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockStore)(nil).UpdateInstance), instance)
}

// DeleteInstance mocks base method
func (m *MockStore) DeleteInstance(instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockStoreMockRecorder) DeleteInstance(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockStore)(nil).DeleteInstance), instanceID)
}

// BatchDeleteInstances mocks base method
func (m *MockStore) BatchDeleteInstances(ids []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteInstances", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteInstances indicates an expected call of BatchDeleteInstances
func (mr *MockStoreMockRecorder) BatchDeleteInstances(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteInstances", reflect.TypeOf((*MockStore)(nil).BatchDeleteInstances), ids)
}

// CleanInstance mocks base method
func (m *MockStore) CleanInstance(instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanInstance", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanInstance indicates an expected call of CleanInstance
func (mr *MockStoreMockRecorder) CleanInstance(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanInstance", reflect.TypeOf((*MockStore)(nil).CleanInstance), instanceID)
}

// CheckInstancesExisted mocks base method
func (m *MockStore) CheckInstancesExisted(ids map[string]bool) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInstancesExisted", ids)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInstancesExisted indicates an expected call of CheckInstancesExisted
func (mr *MockStoreMockRecorder) CheckInstancesExisted(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInstancesExisted", reflect.TypeOf((*MockStore)(nil).CheckInstancesExisted), ids)
}

// GetInstancesBrief mocks base method
func (m *MockStore) GetInstancesBrief(ids map[string]bool) (map[string]*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesBrief", ids)
	ret0, _ := ret[0].(map[string]*model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesBrief indicates an expected call of GetInstancesBrief
func (mr *MockStoreMockRecorder) GetInstancesBrief(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesBrief", reflect.TypeOf((*MockStore)(nil).GetInstancesBrief), ids)
}

// GetInstance mocks base method
func (m *MockStore) GetInstance(instanceID string) (*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", instanceID)
	ret0, _ := ret[0].(*model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance
func (mr *MockStoreMockRecorder) GetInstance(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockStore)(nil).GetInstance), instanceID)
}

// GetInstancesCount mocks base method
func (m *MockStore) GetInstancesCount() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesCount")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesCount indicates an expected call of GetInstancesCount
func (mr *MockStoreMockRecorder) GetInstancesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesCount", reflect.TypeOf((*MockStore)(nil).GetInstancesCount))
}

// GetInstancesMainByService mocks base method
func (m *MockStore) GetInstancesMainByService(serviceID, host string) ([]*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesMainByService", serviceID, host)
	ret0, _ := ret[0].([]*model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesMainByService indicates an expected call of GetInstancesMainByService
func (mr *MockStoreMockRecorder) GetInstancesMainByService(serviceID, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesMainByService", reflect.TypeOf((*MockStore)(nil).GetInstancesMainByService), serviceID, host)
}

// GetExpandInstances mocks base method
func (m *MockStore) GetExpandInstances(filter, metaFilter map[string]string, offset, limit uint32) (uint32, []*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpandInstances", filter, metaFilter, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.Instance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExpandInstances indicates an expected call of GetExpandInstances
func (mr *MockStoreMockRecorder) GetExpandInstances(filter, metaFilter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpandInstances", reflect.TypeOf((*MockStore)(nil).GetExpandInstances), filter, metaFilter, offset, limit)
}

// GetMoreInstances mocks base method
func (m *MockStore) GetMoreInstances(mtime time.Time, firstUpdate, needMeta bool, serviceID []string) (map[string]*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreInstances", mtime, firstUpdate, needMeta, serviceID)
	ret0, _ := ret[0].(map[string]*model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreInstances indicates an expected call of GetMoreInstances
func (mr *MockStoreMockRecorder) GetMoreInstances(mtime, firstUpdate, needMeta, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreInstances", reflect.TypeOf((*MockStore)(nil).GetMoreInstances), mtime, firstUpdate, needMeta, serviceID)
}

// SetInstanceHealthStatus mocks base method
func (m *MockStore) SetInstanceHealthStatus(instanceID string, flag int, revision string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceHealthStatus", instanceID, flag, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceHealthStatus indicates an expected call of SetInstanceHealthStatus
func (mr *MockStoreMockRecorder) SetInstanceHealthStatus(instanceID, flag, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceHealthStatus", reflect.TypeOf((*MockStore)(nil).SetInstanceHealthStatus), instanceID, flag, revision)
}

// BatchSetInstanceIsolate mocks base method
func (m *MockStore) BatchSetInstanceIsolate(ids []interface{}, isolate int, revision string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSetInstanceIsolate", ids, isolate, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSetInstanceIsolate indicates an expected call of BatchSetInstanceIsolate
func (mr *MockStoreMockRecorder) BatchSetInstanceIsolate(ids, isolate, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSetInstanceIsolate", reflect.TypeOf((*MockStore)(nil).BatchSetInstanceIsolate), ids, isolate, revision)
}

// CreateRoutingConfig mocks base method
func (m *MockStore) CreateRoutingConfig(conf *model.RoutingConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutingConfig", conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoutingConfig indicates an expected call of CreateRoutingConfig
func (mr *MockStoreMockRecorder) CreateRoutingConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingConfig", reflect.TypeOf((*MockStore)(nil).CreateRoutingConfig), conf)
}

// UpdateRoutingConfig mocks base method
func (m *MockStore) UpdateRoutingConfig(conf *model.RoutingConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingConfig", conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoutingConfig indicates an expected call of UpdateRoutingConfig
func (mr *MockStoreMockRecorder) UpdateRoutingConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingConfig", reflect.TypeOf((*MockStore)(nil).UpdateRoutingConfig), conf)
}

// DeleteRoutingConfig mocks base method
func (m *MockStore) DeleteRoutingConfig(serviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutingConfig", serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoutingConfig indicates an expected call of DeleteRoutingConfig
func (mr *MockStoreMockRecorder) DeleteRoutingConfig(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutingConfig", reflect.TypeOf((*MockStore)(nil).DeleteRoutingConfig), serviceID)
}

// GetRoutingConfigsForCache mocks base method
func (m *MockStore) GetRoutingConfigsForCache(mtime time.Time, firstUpdate bool) ([]*model.RoutingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingConfigsForCache", mtime, firstUpdate)
	ret0, _ := ret[0].([]*model.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutingConfigsForCache indicates an expected call of GetRoutingConfigsForCache
func (mr *MockStoreMockRecorder) GetRoutingConfigsForCache(mtime, firstUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingConfigsForCache", reflect.TypeOf((*MockStore)(nil).GetRoutingConfigsForCache), mtime, firstUpdate)
}

// GetRoutingConfigWithService mocks base method
func (m *MockStore) GetRoutingConfigWithService(name, namespace string) (*model.RoutingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingConfigWithService", name, namespace)
	ret0, _ := ret[0].(*model.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutingConfigWithService indicates an expected call of GetRoutingConfigWithService
func (mr *MockStoreMockRecorder) GetRoutingConfigWithService(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingConfigWithService", reflect.TypeOf((*MockStore)(nil).GetRoutingConfigWithService), name, namespace)
}

// GetRoutingConfigWithID mocks base method
func (m *MockStore) GetRoutingConfigWithID(id string) (*model.RoutingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingConfigWithID", id)
	ret0, _ := ret[0].(*model.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutingConfigWithID indicates an expected call of GetRoutingConfigWithID
func (mr *MockStoreMockRecorder) GetRoutingConfigWithID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingConfigWithID", reflect.TypeOf((*MockStore)(nil).GetRoutingConfigWithID), id)
}

// GetRoutingConfigs mocks base method
func (m *MockStore) GetRoutingConfigs(filter map[string]string, offset, limit uint32) (uint32, []*model.ExtendRoutingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingConfigs", filter, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.ExtendRoutingConfig)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRoutingConfigs indicates an expected call of GetRoutingConfigs
func (mr *MockStoreMockRecorder) GetRoutingConfigs(filter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingConfigs", reflect.TypeOf((*MockStore)(nil).GetRoutingConfigs), filter, offset, limit)
}

// GetL5Extend mocks base method
func (m *MockStore) GetL5Extend(serviceID string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetL5Extend", serviceID)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetL5Extend indicates an expected call of GetL5Extend
func (mr *MockStoreMockRecorder) GetL5Extend(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL5Extend", reflect.TypeOf((*MockStore)(nil).GetL5Extend), serviceID)
}

// SetL5Extend mocks base method
func (m *MockStore) SetL5Extend(serviceID string, meta map[string]interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetL5Extend", serviceID, meta)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetL5Extend indicates an expected call of SetL5Extend
func (mr *MockStoreMockRecorder) SetL5Extend(serviceID, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetL5Extend", reflect.TypeOf((*MockStore)(nil).SetL5Extend), serviceID, meta)
}

// GenNextL5Sid mocks base method
func (m *MockStore) GenNextL5Sid(layoutID uint32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenNextL5Sid", layoutID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenNextL5Sid indicates an expected call of GenNextL5Sid
func (mr *MockStoreMockRecorder) GenNextL5Sid(layoutID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenNextL5Sid", reflect.TypeOf((*MockStore)(nil).GenNextL5Sid), layoutID)
}

// GetMoreL5Extend mocks base method
func (m *MockStore) GetMoreL5Extend(mtime time.Time) (map[string]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5Extend", mtime)
	ret0, _ := ret[0].(map[string]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5Extend indicates an expected call of GetMoreL5Extend
func (mr *MockStoreMockRecorder) GetMoreL5Extend(mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5Extend", reflect.TypeOf((*MockStore)(nil).GetMoreL5Extend), mtime)
}

// GetMoreL5Routes mocks base method
func (m *MockStore) GetMoreL5Routes(flow uint32) ([]*model.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5Routes", flow)
	ret0, _ := ret[0].([]*model.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5Routes indicates an expected call of GetMoreL5Routes
func (mr *MockStoreMockRecorder) GetMoreL5Routes(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5Routes", reflect.TypeOf((*MockStore)(nil).GetMoreL5Routes), flow)
}

// GetMoreL5Policies mocks base method
func (m *MockStore) GetMoreL5Policies(flow uint32) ([]*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5Policies", flow)
	ret0, _ := ret[0].([]*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5Policies indicates an expected call of GetMoreL5Policies
func (mr *MockStoreMockRecorder) GetMoreL5Policies(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5Policies", reflect.TypeOf((*MockStore)(nil).GetMoreL5Policies), flow)
}

// GetMoreL5Sections mocks base method
func (m *MockStore) GetMoreL5Sections(flow uint32) ([]*model.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5Sections", flow)
	ret0, _ := ret[0].([]*model.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5Sections indicates an expected call of GetMoreL5Sections
func (mr *MockStoreMockRecorder) GetMoreL5Sections(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5Sections", reflect.TypeOf((*MockStore)(nil).GetMoreL5Sections), flow)
}

// GetMoreL5IPConfigs mocks base method
func (m *MockStore) GetMoreL5IPConfigs(flow uint32) ([]*model.IPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5IPConfigs", flow)
	ret0, _ := ret[0].([]*model.IPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5IPConfigs indicates an expected call of GetMoreL5IPConfigs
func (mr *MockStoreMockRecorder) GetMoreL5IPConfigs(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5IPConfigs", reflect.TypeOf((*MockStore)(nil).GetMoreL5IPConfigs), flow)
}

// CreateRateLimit mocks base method
func (m *MockStore) CreateRateLimit(limiting *model.RateLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateLimit", limiting)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateLimit indicates an expected call of CreateRateLimit
func (mr *MockStoreMockRecorder) CreateRateLimit(limiting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimit", reflect.TypeOf((*MockStore)(nil).CreateRateLimit), limiting)
}

// UpdateRateLimit mocks base method
func (m *MockStore) UpdateRateLimit(limiting *model.RateLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateLimit", limiting)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimit indicates an expected call of UpdateRateLimit
func (mr *MockStoreMockRecorder) UpdateRateLimit(limiting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimit", reflect.TypeOf((*MockStore)(nil).UpdateRateLimit), limiting)
}

// DeleteRateLimit mocks base method
func (m *MockStore) DeleteRateLimit(limiting *model.RateLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateLimit", limiting)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimit indicates an expected call of DeleteRateLimit
func (mr *MockStoreMockRecorder) DeleteRateLimit(limiting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimit", reflect.TypeOf((*MockStore)(nil).DeleteRateLimit), limiting)
}

// GetExtendRateLimits mocks base method
func (m *MockStore) GetExtendRateLimits(query map[string]string, offset, limit uint32) (uint32, []*model.ExtendRateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtendRateLimits", query, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.ExtendRateLimit)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExtendRateLimits indicates an expected call of GetExtendRateLimits
func (mr *MockStoreMockRecorder) GetExtendRateLimits(query, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtendRateLimits", reflect.TypeOf((*MockStore)(nil).GetExtendRateLimits), query, offset, limit)
}

// GetRateLimitWithID mocks base method
func (m *MockStore) GetRateLimitWithID(id string) (*model.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitWithID", id)
	ret0, _ := ret[0].(*model.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimitWithID indicates an expected call of GetRateLimitWithID
func (mr *MockStoreMockRecorder) GetRateLimitWithID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitWithID", reflect.TypeOf((*MockStore)(nil).GetRateLimitWithID), id)
}

// GetRateLimitsForCache mocks base method
func (m *MockStore) GetRateLimitsForCache(mtime time.Time, firstUpdate bool) ([]*model.RateLimit, []*model.RateLimitRevision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitsForCache", mtime, firstUpdate)
	ret0, _ := ret[0].([]*model.RateLimit)
	ret1, _ := ret[1].([]*model.RateLimitRevision)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRateLimitsForCache indicates an expected call of GetRateLimitsForCache
func (mr *MockStoreMockRecorder) GetRateLimitsForCache(mtime, firstUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitsForCache", reflect.TypeOf((*MockStore)(nil).GetRateLimitsForCache), mtime, firstUpdate)
}

// CreateCircuitBreaker mocks base method
func (m *MockStore) CreateCircuitBreaker(circuitBreaker *model.CircuitBreaker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCircuitBreaker", circuitBreaker)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCircuitBreaker indicates an expected call of CreateCircuitBreaker
func (mr *MockStoreMockRecorder) CreateCircuitBreaker(circuitBreaker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCircuitBreaker", reflect.TypeOf((*MockStore)(nil).CreateCircuitBreaker), circuitBreaker)
}

// TagCircuitBreaker mocks base method
func (m *MockStore) TagCircuitBreaker(circuitBreaker *model.CircuitBreaker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagCircuitBreaker", circuitBreaker)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagCircuitBreaker indicates an expected call of TagCircuitBreaker
func (mr *MockStoreMockRecorder) TagCircuitBreaker(circuitBreaker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCircuitBreaker", reflect.TypeOf((*MockStore)(nil).TagCircuitBreaker), circuitBreaker)
}

// ReleaseCircuitBreaker mocks base method
func (m *MockStore) ReleaseCircuitBreaker(circuitBreakerRelation *model.CircuitBreakerRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseCircuitBreaker", circuitBreakerRelation)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseCircuitBreaker indicates an expected call of ReleaseCircuitBreaker
func (mr *MockStoreMockRecorder) ReleaseCircuitBreaker(circuitBreakerRelation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseCircuitBreaker", reflect.TypeOf((*MockStore)(nil).ReleaseCircuitBreaker), circuitBreakerRelation)
}

// UnbindCircuitBreaker mocks base method
func (m *MockStore) UnbindCircuitBreaker(serviceID, ruleID, ruleVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindCircuitBreaker", serviceID, ruleID, ruleVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindCircuitBreaker indicates an expected call of UnbindCircuitBreaker
func (mr *MockStoreMockRecorder) UnbindCircuitBreaker(serviceID, ruleID, ruleVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindCircuitBreaker", reflect.TypeOf((*MockStore)(nil).UnbindCircuitBreaker), serviceID, ruleID, ruleVersion)
}

// DeleteTagCircuitBreaker mocks base method
func (m *MockStore) DeleteTagCircuitBreaker(id, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagCircuitBreaker", id, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagCircuitBreaker indicates an expected call of DeleteTagCircuitBreaker
func (mr *MockStoreMockRecorder) DeleteTagCircuitBreaker(id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagCircuitBreaker", reflect.TypeOf((*MockStore)(nil).DeleteTagCircuitBreaker), id, version)
}

// DeleteMasterCircuitBreaker mocks base method
func (m *MockStore) DeleteMasterCircuitBreaker(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMasterCircuitBreaker", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMasterCircuitBreaker indicates an expected call of DeleteMasterCircuitBreaker
func (mr *MockStoreMockRecorder) DeleteMasterCircuitBreaker(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMasterCircuitBreaker", reflect.TypeOf((*MockStore)(nil).DeleteMasterCircuitBreaker), id)
}

// UpdateCircuitBreaker mocks base method
func (m *MockStore) UpdateCircuitBreaker(circuitBraker *model.CircuitBreaker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCircuitBreaker", circuitBraker)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCircuitBreaker indicates an expected call of UpdateCircuitBreaker
func (mr *MockStoreMockRecorder) UpdateCircuitBreaker(circuitBraker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCircuitBreaker", reflect.TypeOf((*MockStore)(nil).UpdateCircuitBreaker), circuitBraker)
}

// GetCircuitBreaker mocks base method
func (m *MockStore) GetCircuitBreaker(id, version string) (*model.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreaker", id, version)
	ret0, _ := ret[0].(*model.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreaker indicates an expected call of GetCircuitBreaker
func (mr *MockStoreMockRecorder) GetCircuitBreaker(id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreaker", reflect.TypeOf((*MockStore)(nil).GetCircuitBreaker), id, version)
}

// GetCircuitBreakerVersions mocks base method
func (m *MockStore) GetCircuitBreakerVersions(id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerVersions", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakerVersions indicates an expected call of GetCircuitBreakerVersions
func (mr *MockStoreMockRecorder) GetCircuitBreakerVersions(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerVersions", reflect.TypeOf((*MockStore)(nil).GetCircuitBreakerVersions), id)
}

// GetCircuitBreakerMasterRelation mocks base method
func (m *MockStore) GetCircuitBreakerMasterRelation(ruleID string) ([]*model.CircuitBreakerRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerMasterRelation", ruleID)
	ret0, _ := ret[0].([]*model.CircuitBreakerRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakerMasterRelation indicates an expected call of GetCircuitBreakerMasterRelation
func (mr *MockStoreMockRecorder) GetCircuitBreakerMasterRelation(ruleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerMasterRelation", reflect.TypeOf((*MockStore)(nil).GetCircuitBreakerMasterRelation), ruleID)
}

// GetCircuitBreakerRelation mocks base method
func (m *MockStore) GetCircuitBreakerRelation(ruleID, ruleVersion string) ([]*model.CircuitBreakerRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerRelation", ruleID, ruleVersion)
	ret0, _ := ret[0].([]*model.CircuitBreakerRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakerRelation indicates an expected call of GetCircuitBreakerRelation
func (mr *MockStoreMockRecorder) GetCircuitBreakerRelation(ruleID, ruleVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerRelation", reflect.TypeOf((*MockStore)(nil).GetCircuitBreakerRelation), ruleID, ruleVersion)
}

// GetCircuitBreakerForCache mocks base method
func (m *MockStore) GetCircuitBreakerForCache(mtime time.Time, firstUpdate bool) ([]*model.ServiceWithCircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerForCache", mtime, firstUpdate)
	ret0, _ := ret[0].([]*model.ServiceWithCircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakerForCache indicates an expected call of GetCircuitBreakerForCache
func (mr *MockStoreMockRecorder) GetCircuitBreakerForCache(mtime, firstUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerForCache", reflect.TypeOf((*MockStore)(nil).GetCircuitBreakerForCache), mtime, firstUpdate)
}

// ListMasterCircuitBreakers mocks base method
func (m *MockStore) ListMasterCircuitBreakers(filters map[string]string, offset, limit uint32) (*model.CircuitBreakerDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMasterCircuitBreakers", filters, offset, limit)
	ret0, _ := ret[0].(*model.CircuitBreakerDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMasterCircuitBreakers indicates an expected call of ListMasterCircuitBreakers
func (mr *MockStoreMockRecorder) ListMasterCircuitBreakers(filters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMasterCircuitBreakers", reflect.TypeOf((*MockStore)(nil).ListMasterCircuitBreakers), filters, offset, limit)
}

// ListReleaseCircuitBreakers mocks base method
func (m *MockStore) ListReleaseCircuitBreakers(filters map[string]string, offset, limit uint32) (*model.CircuitBreakerDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleaseCircuitBreakers", filters, offset, limit)
	ret0, _ := ret[0].(*model.CircuitBreakerDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReleaseCircuitBreakers indicates an expected call of ListReleaseCircuitBreakers
func (mr *MockStoreMockRecorder) ListReleaseCircuitBreakers(filters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseCircuitBreakers", reflect.TypeOf((*MockStore)(nil).ListReleaseCircuitBreakers), filters, offset, limit)
}

// GetCircuitBreakersByService mocks base method
func (m *MockStore) GetCircuitBreakersByService(name, namespace string) (*model.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakersByService", name, namespace)
	ret0, _ := ret[0].(*model.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakersByService indicates an expected call of GetCircuitBreakersByService
func (mr *MockStoreMockRecorder) GetCircuitBreakersByService(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakersByService", reflect.TypeOf((*MockStore)(nil).GetCircuitBreakersByService), name, namespace)
}

// CreatePlatform mocks base method
func (m *MockStore) CreatePlatform(platform *model.Platform) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatform", platform)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlatform indicates an expected call of CreatePlatform
func (mr *MockStoreMockRecorder) CreatePlatform(platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatform", reflect.TypeOf((*MockStore)(nil).CreatePlatform), platform)
}

// UpdatePlatform mocks base method
func (m *MockStore) UpdatePlatform(platform *model.Platform) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlatform", platform)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlatform indicates an expected call of UpdatePlatform
func (mr *MockStoreMockRecorder) UpdatePlatform(platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatform", reflect.TypeOf((*MockStore)(nil).UpdatePlatform), platform)
}

// DeletePlatform mocks base method
func (m *MockStore) DeletePlatform(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlatform", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlatform indicates an expected call of DeletePlatform
func (mr *MockStoreMockRecorder) DeletePlatform(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatform", reflect.TypeOf((*MockStore)(nil).DeletePlatform), id)
}

// GetPlatformById mocks base method
func (m *MockStore) GetPlatformById(id string) (*model.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformById", id)
	ret0, _ := ret[0].(*model.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformById indicates an expected call of GetPlatformById
func (mr *MockStoreMockRecorder) GetPlatformById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformById", reflect.TypeOf((*MockStore)(nil).GetPlatformById), id)
}

// GetPlatforms mocks base method
func (m *MockStore) GetPlatforms(query map[string]string, offset, limit uint32) (uint32, []*model.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatforms", query, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.Platform)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPlatforms indicates an expected call of GetPlatforms
func (mr *MockStoreMockRecorder) GetPlatforms(query, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockStore)(nil).GetPlatforms), query, offset, limit)
}

// MockNamespaceStore is a mock of NamespaceStore interface
type MockNamespaceStore struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceStoreMockRecorder
}

// MockNamespaceStoreMockRecorder is the mock recorder for MockNamespaceStore
type MockNamespaceStoreMockRecorder struct {
	mock *MockNamespaceStore
}

// NewMockNamespaceStore creates a new mock instance
func NewMockNamespaceStore(ctrl *gomock.Controller) *MockNamespaceStore {
	mock := &MockNamespaceStore{ctrl: ctrl}
	mock.recorder = &MockNamespaceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceStore) EXPECT() *MockNamespaceStoreMockRecorder {
	return m.recorder
}

// AddNamespace mocks base method
func (m *MockNamespaceStore) AddNamespace(namespace *model.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamespace", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNamespace indicates an expected call of AddNamespace
func (mr *MockNamespaceStoreMockRecorder) AddNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamespace", reflect.TypeOf((*MockNamespaceStore)(nil).AddNamespace), namespace)
}

// UpdateNamespace mocks base method
func (m *MockNamespaceStore) UpdateNamespace(namespace *model.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNamespace indicates an expected call of UpdateNamespace
func (mr *MockNamespaceStoreMockRecorder) UpdateNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockNamespaceStore)(nil).UpdateNamespace), namespace)
}

// UpdateNamespaceToken mocks base method
func (m *MockNamespaceStore) UpdateNamespaceToken(name, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceToken", name, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNamespaceToken indicates an expected call of UpdateNamespaceToken
func (mr *MockNamespaceStoreMockRecorder) UpdateNamespaceToken(name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceToken", reflect.TypeOf((*MockNamespaceStore)(nil).UpdateNamespaceToken), name, token)
}

// ListNamespaces mocks base method
func (m *MockNamespaceStore) ListNamespaces(owner string) ([]*model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces", owner)
	ret0, _ := ret[0].([]*model.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces
func (mr *MockNamespaceStoreMockRecorder) ListNamespaces(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockNamespaceStore)(nil).ListNamespaces), owner)
}

// GetNamespace mocks base method
func (m *MockNamespaceStore) GetNamespace(name string) (*model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", name)
	ret0, _ := ret[0].(*model.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockNamespaceStoreMockRecorder) GetNamespace(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockNamespaceStore)(nil).GetNamespace), name)
}

// GetNamespaces mocks base method
func (m *MockNamespaceStore) GetNamespaces(filter map[string][]string, offset, limit int) ([]*model.Namespace, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", filter, offset, limit)
	ret0, _ := ret[0].([]*model.Namespace)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNamespaces indicates an expected call of GetNamespaces
func (mr *MockNamespaceStoreMockRecorder) GetNamespaces(filter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockNamespaceStore)(nil).GetNamespaces), filter, offset, limit)
}

// GetMoreNamespaces mocks base method
func (m *MockNamespaceStore) GetMoreNamespaces(mtime time.Time) ([]*model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreNamespaces", mtime)
	ret0, _ := ret[0].([]*model.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreNamespaces indicates an expected call of GetMoreNamespaces
func (mr *MockNamespaceStoreMockRecorder) GetMoreNamespaces(mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreNamespaces", reflect.TypeOf((*MockNamespaceStore)(nil).GetMoreNamespaces), mtime)
}

// MockBusinessStore is a mock of BusinessStore interface
type MockBusinessStore struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessStoreMockRecorder
}

// MockBusinessStoreMockRecorder is the mock recorder for MockBusinessStore
type MockBusinessStoreMockRecorder struct {
	mock *MockBusinessStore
}

// NewMockBusinessStore creates a new mock instance
func NewMockBusinessStore(ctrl *gomock.Controller) *MockBusinessStore {
	mock := &MockBusinessStore{ctrl: ctrl}
	mock.recorder = &MockBusinessStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBusinessStore) EXPECT() *MockBusinessStoreMockRecorder {
	return m.recorder
}

// AddBusiness mocks base method
func (m *MockBusinessStore) AddBusiness(business *model.Business) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBusiness", business)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBusiness indicates an expected call of AddBusiness
func (mr *MockBusinessStoreMockRecorder) AddBusiness(business interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBusiness", reflect.TypeOf((*MockBusinessStore)(nil).AddBusiness), business)
}

// DeleteBusiness mocks base method
func (m *MockBusinessStore) DeleteBusiness(bid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBusiness", bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBusiness indicates an expected call of DeleteBusiness
func (mr *MockBusinessStoreMockRecorder) DeleteBusiness(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBusiness", reflect.TypeOf((*MockBusinessStore)(nil).DeleteBusiness), bid)
}

// UpdateBusiness mocks base method
func (m *MockBusinessStore) UpdateBusiness(business *model.Business) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusiness", business)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBusiness indicates an expected call of UpdateBusiness
func (mr *MockBusinessStoreMockRecorder) UpdateBusiness(business interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusiness", reflect.TypeOf((*MockBusinessStore)(nil).UpdateBusiness), business)
}

// UpdateBusinessToken mocks base method
func (m *MockBusinessStore) UpdateBusinessToken(bid, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessToken", bid, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBusinessToken indicates an expected call of UpdateBusinessToken
func (mr *MockBusinessStoreMockRecorder) UpdateBusinessToken(bid, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessToken", reflect.TypeOf((*MockBusinessStore)(nil).UpdateBusinessToken), bid, token)
}

// ListBusiness mocks base method
func (m *MockBusinessStore) ListBusiness(owner string) ([]*model.Business, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBusiness", owner)
	ret0, _ := ret[0].([]*model.Business)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBusiness indicates an expected call of ListBusiness
func (mr *MockBusinessStoreMockRecorder) ListBusiness(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBusiness", reflect.TypeOf((*MockBusinessStore)(nil).ListBusiness), owner)
}

// GetBusinessByID mocks base method
func (m *MockBusinessStore) GetBusinessByID(id string) (*model.Business, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessByID", id)
	ret0, _ := ret[0].(*model.Business)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessByID indicates an expected call of GetBusinessByID
func (mr *MockBusinessStoreMockRecorder) GetBusinessByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessByID", reflect.TypeOf((*MockBusinessStore)(nil).GetBusinessByID), id)
}

// GetMoreBusiness mocks base method
func (m *MockBusinessStore) GetMoreBusiness(mtime time.Time) ([]*model.Business, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreBusiness", mtime)
	ret0, _ := ret[0].([]*model.Business)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreBusiness indicates an expected call of GetMoreBusiness
func (mr *MockBusinessStoreMockRecorder) GetMoreBusiness(mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreBusiness", reflect.TypeOf((*MockBusinessStore)(nil).GetMoreBusiness), mtime)
}

// MockServiceStore is a mock of ServiceStore interface
type MockServiceStore struct {
	ctrl     *gomock.Controller
	recorder *MockServiceStoreMockRecorder
}

// MockServiceStoreMockRecorder is the mock recorder for MockServiceStore
type MockServiceStoreMockRecorder struct {
	mock *MockServiceStore
}

// NewMockServiceStore creates a new mock instance
func NewMockServiceStore(ctrl *gomock.Controller) *MockServiceStore {
	mock := &MockServiceStore{ctrl: ctrl}
	mock.recorder = &MockServiceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceStore) EXPECT() *MockServiceStoreMockRecorder {
	return m.recorder
}

// AddService mocks base method
func (m *MockServiceStore) AddService(service *model.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddService indicates an expected call of AddService
func (mr *MockServiceStoreMockRecorder) AddService(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockServiceStore)(nil).AddService), service)
}

// DeleteService mocks base method
func (m *MockServiceStore) DeleteService(id, serviceName, namespaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", id, serviceName, namespaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockServiceStoreMockRecorder) DeleteService(id, serviceName, namespaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockServiceStore)(nil).DeleteService), id, serviceName, namespaceName)
}

// DeleteServiceAlias mocks base method
func (m *MockServiceStore) DeleteServiceAlias(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAlias", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAlias indicates an expected call of DeleteServiceAlias
func (mr *MockServiceStoreMockRecorder) DeleteServiceAlias(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAlias", reflect.TypeOf((*MockServiceStore)(nil).DeleteServiceAlias), name, namespace)
}

// UpdateServiceAlias mocks base method
func (m *MockServiceStore) UpdateServiceAlias(alias *model.Service, needUpdateOwner bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceAlias", alias, needUpdateOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceAlias indicates an expected call of UpdateServiceAlias
func (mr *MockServiceStoreMockRecorder) UpdateServiceAlias(alias, needUpdateOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAlias", reflect.TypeOf((*MockServiceStore)(nil).UpdateServiceAlias), alias, needUpdateOwner)
}

// UpdateService mocks base method
func (m *MockServiceStore) UpdateService(service *model.Service, needUpdateOwner bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", service, needUpdateOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateService indicates an expected call of UpdateService
func (mr *MockServiceStoreMockRecorder) UpdateService(service, needUpdateOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockServiceStore)(nil).UpdateService), service, needUpdateOwner)
}

// UpdateServiceToken mocks base method
func (m *MockServiceStore) UpdateServiceToken(serviceID, token, revision string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceToken", serviceID, token, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceToken indicates an expected call of UpdateServiceToken
func (mr *MockServiceStoreMockRecorder) UpdateServiceToken(serviceID, token, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceToken", reflect.TypeOf((*MockServiceStore)(nil).UpdateServiceToken), serviceID, token, revision)
}

// GetSourceServiceToken mocks base method
func (m *MockServiceStore) GetSourceServiceToken(name, namespace string) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceServiceToken", name, namespace)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceServiceToken indicates an expected call of GetSourceServiceToken
func (mr *MockServiceStoreMockRecorder) GetSourceServiceToken(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceServiceToken", reflect.TypeOf((*MockServiceStore)(nil).GetSourceServiceToken), name, namespace)
}

// GetService mocks base method
func (m *MockServiceStore) GetService(name, namespace string) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", name, namespace)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockServiceStoreMockRecorder) GetService(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceStore)(nil).GetService), name, namespace)
}

// GetServiceByID mocks base method
func (m *MockServiceStore) GetServiceByID(id string) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByID", id)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByID indicates an expected call of GetServiceByID
func (mr *MockServiceStoreMockRecorder) GetServiceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByID", reflect.TypeOf((*MockServiceStore)(nil).GetServiceByID), id)
}

// GetServices mocks base method
func (m *MockServiceStore) GetServices(serviceFilters, serviceMetas map[string]string, instanceFilters *store.InstanceArgs, offset, limit uint32) (uint32, []*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", serviceFilters, serviceMetas, instanceFilters, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.Service)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServices indicates an expected call of GetServices
func (mr *MockServiceStoreMockRecorder) GetServices(serviceFilters, serviceMetas, instanceFilters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockServiceStore)(nil).GetServices), serviceFilters, serviceMetas, instanceFilters, offset, limit)
}

// GetServicesCount mocks base method
func (m *MockServiceStore) GetServicesCount() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesCount")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesCount indicates an expected call of GetServicesCount
func (mr *MockServiceStoreMockRecorder) GetServicesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesCount", reflect.TypeOf((*MockServiceStore)(nil).GetServicesCount))
}

// GetMoreServices mocks base method
func (m *MockServiceStore) GetMoreServices(mtime time.Time, firstUpdate, disableBusiness, needMeta bool) (map[string]*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreServices", mtime, firstUpdate, disableBusiness, needMeta)
	ret0, _ := ret[0].(map[string]*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreServices indicates an expected call of GetMoreServices
func (mr *MockServiceStoreMockRecorder) GetMoreServices(mtime, firstUpdate, disableBusiness, needMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreServices", reflect.TypeOf((*MockServiceStore)(nil).GetMoreServices), mtime, firstUpdate, disableBusiness, needMeta)
}

// GetServiceAliases mocks base method
func (m *MockServiceStore) GetServiceAliases(filter map[string]string, offset, limit uint32) (uint32, []*model.ServiceAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAliases", filter, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.ServiceAlias)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServiceAliases indicates an expected call of GetServiceAliases
func (mr *MockServiceStoreMockRecorder) GetServiceAliases(filter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAliases", reflect.TypeOf((*MockServiceStore)(nil).GetServiceAliases), filter, offset, limit)
}

// GetSystemServices mocks base method
func (m *MockServiceStore) GetSystemServices() ([]*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemServices")
	ret0, _ := ret[0].([]*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemServices indicates an expected call of GetSystemServices
func (mr *MockServiceStoreMockRecorder) GetSystemServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemServices", reflect.TypeOf((*MockServiceStore)(nil).GetSystemServices))
}

// GetServicesBatch mocks base method
func (m *MockServiceStore) GetServicesBatch(services []*model.Service) ([]*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesBatch", services)
	ret0, _ := ret[0].([]*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesBatch indicates an expected call of GetServicesBatch
func (mr *MockServiceStoreMockRecorder) GetServicesBatch(services interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesBatch", reflect.TypeOf((*MockServiceStore)(nil).GetServicesBatch), services)
}

// MockInstanceStore is a mock of InstanceStore interface
type MockInstanceStore struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceStoreMockRecorder
}

// MockInstanceStoreMockRecorder is the mock recorder for MockInstanceStore
type MockInstanceStoreMockRecorder struct {
	mock *MockInstanceStore
}

// NewMockInstanceStore creates a new mock instance
func NewMockInstanceStore(ctrl *gomock.Controller) *MockInstanceStore {
	mock := &MockInstanceStore{ctrl: ctrl}
	mock.recorder = &MockInstanceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanceStore) EXPECT() *MockInstanceStoreMockRecorder {
	return m.recorder
}

// AddInstance mocks base method
func (m *MockInstanceStore) AddInstance(instance *model.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInstance", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInstance indicates an expected call of AddInstance
func (mr *MockInstanceStoreMockRecorder) AddInstance(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstance", reflect.TypeOf((*MockInstanceStore)(nil).AddInstance), instance)
}

// BatchAddInstances mocks base method
func (m *MockInstanceStore) BatchAddInstances(instances []*model.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddInstances", instances)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAddInstances indicates an expected call of BatchAddInstances
func (mr *MockInstanceStoreMockRecorder) BatchAddInstances(instances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddInstances", reflect.TypeOf((*MockInstanceStore)(nil).BatchAddInstances), instances)
}

// UpdateInstance mocks base method
func (m *MockInstanceStore) UpdateInstance(instance *model.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstance indicates an expected call of UpdateInstance
func (mr *MockInstanceStoreMockRecorder) UpdateInstance(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockInstanceStore)(nil).UpdateInstance), instance)
}

// DeleteInstance mocks base method
func (m *MockInstanceStore) DeleteInstance(instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockInstanceStoreMockRecorder) DeleteInstance(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockInstanceStore)(nil).DeleteInstance), instanceID)
}

// BatchDeleteInstances mocks base method
func (m *MockInstanceStore) BatchDeleteInstances(ids []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteInstances", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteInstances indicates an expected call of BatchDeleteInstances
func (mr *MockInstanceStoreMockRecorder) BatchDeleteInstances(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteInstances", reflect.TypeOf((*MockInstanceStore)(nil).BatchDeleteInstances), ids)
}

// CleanInstance mocks base method
func (m *MockInstanceStore) CleanInstance(instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanInstance", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanInstance indicates an expected call of CleanInstance
func (mr *MockInstanceStoreMockRecorder) CleanInstance(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanInstance", reflect.TypeOf((*MockInstanceStore)(nil).CleanInstance), instanceID)
}

// CheckInstancesExisted mocks base method
func (m *MockInstanceStore) CheckInstancesExisted(ids map[string]bool) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInstancesExisted", ids)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInstancesExisted indicates an expected call of CheckInstancesExisted
func (mr *MockInstanceStoreMockRecorder) CheckInstancesExisted(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInstancesExisted", reflect.TypeOf((*MockInstanceStore)(nil).CheckInstancesExisted), ids)
}

// GetInstancesBrief mocks base method
func (m *MockInstanceStore) GetInstancesBrief(ids map[string]bool) (map[string]*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesBrief", ids)
	ret0, _ := ret[0].(map[string]*model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesBrief indicates an expected call of GetInstancesBrief
func (mr *MockInstanceStoreMockRecorder) GetInstancesBrief(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesBrief", reflect.TypeOf((*MockInstanceStore)(nil).GetInstancesBrief), ids)
}

// GetInstance mocks base method
func (m *MockInstanceStore) GetInstance(instanceID string) (*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", instanceID)
	ret0, _ := ret[0].(*model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance
func (mr *MockInstanceStoreMockRecorder) GetInstance(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockInstanceStore)(nil).GetInstance), instanceID)
}

// GetInstancesCount mocks base method
func (m *MockInstanceStore) GetInstancesCount() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesCount")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesCount indicates an expected call of GetInstancesCount
func (mr *MockInstanceStoreMockRecorder) GetInstancesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesCount", reflect.TypeOf((*MockInstanceStore)(nil).GetInstancesCount))
}

// GetInstancesMainByService mocks base method
func (m *MockInstanceStore) GetInstancesMainByService(serviceID, host string) ([]*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesMainByService", serviceID, host)
	ret0, _ := ret[0].([]*model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesMainByService indicates an expected call of GetInstancesMainByService
func (mr *MockInstanceStoreMockRecorder) GetInstancesMainByService(serviceID, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesMainByService", reflect.TypeOf((*MockInstanceStore)(nil).GetInstancesMainByService), serviceID, host)
}

// GetExpandInstances mocks base method
func (m *MockInstanceStore) GetExpandInstances(filter, metaFilter map[string]string, offset, limit uint32) (uint32, []*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpandInstances", filter, metaFilter, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.Instance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExpandInstances indicates an expected call of GetExpandInstances
func (mr *MockInstanceStoreMockRecorder) GetExpandInstances(filter, metaFilter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpandInstances", reflect.TypeOf((*MockInstanceStore)(nil).GetExpandInstances), filter, metaFilter, offset, limit)
}

// GetMoreInstances mocks base method
func (m *MockInstanceStore) GetMoreInstances(mtime time.Time, firstUpdate, needMeta bool, serviceID []string) (map[string]*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreInstances", mtime, firstUpdate, needMeta, serviceID)
	ret0, _ := ret[0].(map[string]*model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreInstances indicates an expected call of GetMoreInstances
func (mr *MockInstanceStoreMockRecorder) GetMoreInstances(mtime, firstUpdate, needMeta, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreInstances", reflect.TypeOf((*MockInstanceStore)(nil).GetMoreInstances), mtime, firstUpdate, needMeta, serviceID)
}

// SetInstanceHealthStatus mocks base method
func (m *MockInstanceStore) SetInstanceHealthStatus(instanceID string, flag int, revision string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceHealthStatus", instanceID, flag, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceHealthStatus indicates an expected call of SetInstanceHealthStatus
func (mr *MockInstanceStoreMockRecorder) SetInstanceHealthStatus(instanceID, flag, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceHealthStatus", reflect.TypeOf((*MockInstanceStore)(nil).SetInstanceHealthStatus), instanceID, flag, revision)
}

// BatchSetInstanceIsolate mocks base method
func (m *MockInstanceStore) BatchSetInstanceIsolate(ids []interface{}, isolate int, revision string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSetInstanceIsolate", ids, isolate, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSetInstanceIsolate indicates an expected call of BatchSetInstanceIsolate
func (mr *MockInstanceStoreMockRecorder) BatchSetInstanceIsolate(ids, isolate, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSetInstanceIsolate", reflect.TypeOf((*MockInstanceStore)(nil).BatchSetInstanceIsolate), ids, isolate, revision)
}

// MockL5Store is a mock of L5Store interface
type MockL5Store struct {
	ctrl     *gomock.Controller
	recorder *MockL5StoreMockRecorder
}

// MockL5StoreMockRecorder is the mock recorder for MockL5Store
type MockL5StoreMockRecorder struct {
	mock *MockL5Store
}

// NewMockL5Store creates a new mock instance
func NewMockL5Store(ctrl *gomock.Controller) *MockL5Store {
	mock := &MockL5Store{ctrl: ctrl}
	mock.recorder = &MockL5StoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockL5Store) EXPECT() *MockL5StoreMockRecorder {
	return m.recorder
}

// GetL5Extend mocks base method
func (m *MockL5Store) GetL5Extend(serviceID string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetL5Extend", serviceID)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetL5Extend indicates an expected call of GetL5Extend
func (mr *MockL5StoreMockRecorder) GetL5Extend(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL5Extend", reflect.TypeOf((*MockL5Store)(nil).GetL5Extend), serviceID)
}

// SetL5Extend mocks base method
func (m *MockL5Store) SetL5Extend(serviceID string, meta map[string]interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetL5Extend", serviceID, meta)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetL5Extend indicates an expected call of SetL5Extend
func (mr *MockL5StoreMockRecorder) SetL5Extend(serviceID, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetL5Extend", reflect.TypeOf((*MockL5Store)(nil).SetL5Extend), serviceID, meta)
}

// GenNextL5Sid mocks base method
func (m *MockL5Store) GenNextL5Sid(layoutID uint32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenNextL5Sid", layoutID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenNextL5Sid indicates an expected call of GenNextL5Sid
func (mr *MockL5StoreMockRecorder) GenNextL5Sid(layoutID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenNextL5Sid", reflect.TypeOf((*MockL5Store)(nil).GenNextL5Sid), layoutID)
}

// GetMoreL5Extend mocks base method
func (m *MockL5Store) GetMoreL5Extend(mtime time.Time) (map[string]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5Extend", mtime)
	ret0, _ := ret[0].(map[string]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5Extend indicates an expected call of GetMoreL5Extend
func (mr *MockL5StoreMockRecorder) GetMoreL5Extend(mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5Extend", reflect.TypeOf((*MockL5Store)(nil).GetMoreL5Extend), mtime)
}

// GetMoreL5Routes mocks base method
func (m *MockL5Store) GetMoreL5Routes(flow uint32) ([]*model.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5Routes", flow)
	ret0, _ := ret[0].([]*model.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5Routes indicates an expected call of GetMoreL5Routes
func (mr *MockL5StoreMockRecorder) GetMoreL5Routes(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5Routes", reflect.TypeOf((*MockL5Store)(nil).GetMoreL5Routes), flow)
}

// GetMoreL5Policies mocks base method
func (m *MockL5Store) GetMoreL5Policies(flow uint32) ([]*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5Policies", flow)
	ret0, _ := ret[0].([]*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5Policies indicates an expected call of GetMoreL5Policies
func (mr *MockL5StoreMockRecorder) GetMoreL5Policies(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5Policies", reflect.TypeOf((*MockL5Store)(nil).GetMoreL5Policies), flow)
}

// GetMoreL5Sections mocks base method
func (m *MockL5Store) GetMoreL5Sections(flow uint32) ([]*model.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5Sections", flow)
	ret0, _ := ret[0].([]*model.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5Sections indicates an expected call of GetMoreL5Sections
func (mr *MockL5StoreMockRecorder) GetMoreL5Sections(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5Sections", reflect.TypeOf((*MockL5Store)(nil).GetMoreL5Sections), flow)
}

// GetMoreL5IPConfigs mocks base method
func (m *MockL5Store) GetMoreL5IPConfigs(flow uint32) ([]*model.IPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoreL5IPConfigs", flow)
	ret0, _ := ret[0].([]*model.IPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoreL5IPConfigs indicates an expected call of GetMoreL5IPConfigs
func (mr *MockL5StoreMockRecorder) GetMoreL5IPConfigs(flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoreL5IPConfigs", reflect.TypeOf((*MockL5Store)(nil).GetMoreL5IPConfigs), flow)
}

// MockRoutingConfigStore is a mock of RoutingConfigStore interface
type MockRoutingConfigStore struct {
	ctrl     *gomock.Controller
	recorder *MockRoutingConfigStoreMockRecorder
}

// MockRoutingConfigStoreMockRecorder is the mock recorder for MockRoutingConfigStore
type MockRoutingConfigStoreMockRecorder struct {
	mock *MockRoutingConfigStore
}

// NewMockRoutingConfigStore creates a new mock instance
func NewMockRoutingConfigStore(ctrl *gomock.Controller) *MockRoutingConfigStore {
	mock := &MockRoutingConfigStore{ctrl: ctrl}
	mock.recorder = &MockRoutingConfigStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoutingConfigStore) EXPECT() *MockRoutingConfigStoreMockRecorder {
	return m.recorder
}

// CreateRoutingConfig mocks base method
func (m *MockRoutingConfigStore) CreateRoutingConfig(conf *model.RoutingConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutingConfig", conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoutingConfig indicates an expected call of CreateRoutingConfig
func (mr *MockRoutingConfigStoreMockRecorder) CreateRoutingConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingConfig", reflect.TypeOf((*MockRoutingConfigStore)(nil).CreateRoutingConfig), conf)
}

// UpdateRoutingConfig mocks base method
func (m *MockRoutingConfigStore) UpdateRoutingConfig(conf *model.RoutingConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingConfig", conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoutingConfig indicates an expected call of UpdateRoutingConfig
func (mr *MockRoutingConfigStoreMockRecorder) UpdateRoutingConfig(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingConfig", reflect.TypeOf((*MockRoutingConfigStore)(nil).UpdateRoutingConfig), conf)
}

// DeleteRoutingConfig mocks base method
func (m *MockRoutingConfigStore) DeleteRoutingConfig(serviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutingConfig", serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoutingConfig indicates an expected call of DeleteRoutingConfig
func (mr *MockRoutingConfigStoreMockRecorder) DeleteRoutingConfig(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutingConfig", reflect.TypeOf((*MockRoutingConfigStore)(nil).DeleteRoutingConfig), serviceID)
}

// GetRoutingConfigsForCache mocks base method
func (m *MockRoutingConfigStore) GetRoutingConfigsForCache(mtime time.Time, firstUpdate bool) ([]*model.RoutingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingConfigsForCache", mtime, firstUpdate)
	ret0, _ := ret[0].([]*model.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutingConfigsForCache indicates an expected call of GetRoutingConfigsForCache
func (mr *MockRoutingConfigStoreMockRecorder) GetRoutingConfigsForCache(mtime, firstUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingConfigsForCache", reflect.TypeOf((*MockRoutingConfigStore)(nil).GetRoutingConfigsForCache), mtime, firstUpdate)
}

// GetRoutingConfigWithService mocks base method
func (m *MockRoutingConfigStore) GetRoutingConfigWithService(name, namespace string) (*model.RoutingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingConfigWithService", name, namespace)
	ret0, _ := ret[0].(*model.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutingConfigWithService indicates an expected call of GetRoutingConfigWithService
func (mr *MockRoutingConfigStoreMockRecorder) GetRoutingConfigWithService(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingConfigWithService", reflect.TypeOf((*MockRoutingConfigStore)(nil).GetRoutingConfigWithService), name, namespace)
}

// GetRoutingConfigWithID mocks base method
func (m *MockRoutingConfigStore) GetRoutingConfigWithID(id string) (*model.RoutingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingConfigWithID", id)
	ret0, _ := ret[0].(*model.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutingConfigWithID indicates an expected call of GetRoutingConfigWithID
func (mr *MockRoutingConfigStoreMockRecorder) GetRoutingConfigWithID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingConfigWithID", reflect.TypeOf((*MockRoutingConfigStore)(nil).GetRoutingConfigWithID), id)
}

// GetRoutingConfigs mocks base method
func (m *MockRoutingConfigStore) GetRoutingConfigs(filter map[string]string, offset, limit uint32) (uint32, []*model.ExtendRoutingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingConfigs", filter, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.ExtendRoutingConfig)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRoutingConfigs indicates an expected call of GetRoutingConfigs
func (mr *MockRoutingConfigStoreMockRecorder) GetRoutingConfigs(filter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingConfigs", reflect.TypeOf((*MockRoutingConfigStore)(nil).GetRoutingConfigs), filter, offset, limit)
}

// MockRateLimitStore is a mock of RateLimitStore interface
type MockRateLimitStore struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitStoreMockRecorder
}

// MockRateLimitStoreMockRecorder is the mock recorder for MockRateLimitStore
type MockRateLimitStoreMockRecorder struct {
	mock *MockRateLimitStore
}

// NewMockRateLimitStore creates a new mock instance
func NewMockRateLimitStore(ctrl *gomock.Controller) *MockRateLimitStore {
	mock := &MockRateLimitStore{ctrl: ctrl}
	mock.recorder = &MockRateLimitStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitStore) EXPECT() *MockRateLimitStoreMockRecorder {
	return m.recorder
}

// CreateRateLimit mocks base method
func (m *MockRateLimitStore) CreateRateLimit(limiting *model.RateLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateLimit", limiting)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateLimit indicates an expected call of CreateRateLimit
func (mr *MockRateLimitStoreMockRecorder) CreateRateLimit(limiting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimit", reflect.TypeOf((*MockRateLimitStore)(nil).CreateRateLimit), limiting)
}

// UpdateRateLimit mocks base method
func (m *MockRateLimitStore) UpdateRateLimit(limiting *model.RateLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateLimit", limiting)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimit indicates an expected call of UpdateRateLimit
func (mr *MockRateLimitStoreMockRecorder) UpdateRateLimit(limiting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimit", reflect.TypeOf((*MockRateLimitStore)(nil).UpdateRateLimit), limiting)
}

// DeleteRateLimit mocks base method
func (m *MockRateLimitStore) DeleteRateLimit(limiting *model.RateLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateLimit", limiting)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimit indicates an expected call of DeleteRateLimit
func (mr *MockRateLimitStoreMockRecorder) DeleteRateLimit(limiting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimit", reflect.TypeOf((*MockRateLimitStore)(nil).DeleteRateLimit), limiting)
}

// GetExtendRateLimits mocks base method
func (m *MockRateLimitStore) GetExtendRateLimits(query map[string]string, offset, limit uint32) (uint32, []*model.ExtendRateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtendRateLimits", query, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.ExtendRateLimit)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExtendRateLimits indicates an expected call of GetExtendRateLimits
func (mr *MockRateLimitStoreMockRecorder) GetExtendRateLimits(query, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtendRateLimits", reflect.TypeOf((*MockRateLimitStore)(nil).GetExtendRateLimits), query, offset, limit)
}

// GetRateLimitWithID mocks base method
func (m *MockRateLimitStore) GetRateLimitWithID(id string) (*model.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitWithID", id)
	ret0, _ := ret[0].(*model.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimitWithID indicates an expected call of GetRateLimitWithID
func (mr *MockRateLimitStoreMockRecorder) GetRateLimitWithID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitWithID", reflect.TypeOf((*MockRateLimitStore)(nil).GetRateLimitWithID), id)
}

// GetRateLimitsForCache mocks base method
func (m *MockRateLimitStore) GetRateLimitsForCache(mtime time.Time, firstUpdate bool) ([]*model.RateLimit, []*model.RateLimitRevision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitsForCache", mtime, firstUpdate)
	ret0, _ := ret[0].([]*model.RateLimit)
	ret1, _ := ret[1].([]*model.RateLimitRevision)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRateLimitsForCache indicates an expected call of GetRateLimitsForCache
func (mr *MockRateLimitStoreMockRecorder) GetRateLimitsForCache(mtime, firstUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitsForCache", reflect.TypeOf((*MockRateLimitStore)(nil).GetRateLimitsForCache), mtime, firstUpdate)
}

// MockCircuitBreakerStore is a mock of CircuitBreakerStore interface
type MockCircuitBreakerStore struct {
	ctrl     *gomock.Controller
	recorder *MockCircuitBreakerStoreMockRecorder
}

// MockCircuitBreakerStoreMockRecorder is the mock recorder for MockCircuitBreakerStore
type MockCircuitBreakerStoreMockRecorder struct {
	mock *MockCircuitBreakerStore
}

// NewMockCircuitBreakerStore creates a new mock instance
func NewMockCircuitBreakerStore(ctrl *gomock.Controller) *MockCircuitBreakerStore {
	mock := &MockCircuitBreakerStore{ctrl: ctrl}
	mock.recorder = &MockCircuitBreakerStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCircuitBreakerStore) EXPECT() *MockCircuitBreakerStoreMockRecorder {
	return m.recorder
}

// CreateCircuitBreaker mocks base method
func (m *MockCircuitBreakerStore) CreateCircuitBreaker(circuitBreaker *model.CircuitBreaker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCircuitBreaker", circuitBreaker)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCircuitBreaker indicates an expected call of CreateCircuitBreaker
func (mr *MockCircuitBreakerStoreMockRecorder) CreateCircuitBreaker(circuitBreaker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCircuitBreaker", reflect.TypeOf((*MockCircuitBreakerStore)(nil).CreateCircuitBreaker), circuitBreaker)
}

// TagCircuitBreaker mocks base method
func (m *MockCircuitBreakerStore) TagCircuitBreaker(circuitBreaker *model.CircuitBreaker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagCircuitBreaker", circuitBreaker)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagCircuitBreaker indicates an expected call of TagCircuitBreaker
func (mr *MockCircuitBreakerStoreMockRecorder) TagCircuitBreaker(circuitBreaker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCircuitBreaker", reflect.TypeOf((*MockCircuitBreakerStore)(nil).TagCircuitBreaker), circuitBreaker)
}

// ReleaseCircuitBreaker mocks base method
func (m *MockCircuitBreakerStore) ReleaseCircuitBreaker(circuitBreakerRelation *model.CircuitBreakerRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseCircuitBreaker", circuitBreakerRelation)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseCircuitBreaker indicates an expected call of ReleaseCircuitBreaker
func (mr *MockCircuitBreakerStoreMockRecorder) ReleaseCircuitBreaker(circuitBreakerRelation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseCircuitBreaker", reflect.TypeOf((*MockCircuitBreakerStore)(nil).ReleaseCircuitBreaker), circuitBreakerRelation)
}

// UnbindCircuitBreaker mocks base method
func (m *MockCircuitBreakerStore) UnbindCircuitBreaker(serviceID, ruleID, ruleVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindCircuitBreaker", serviceID, ruleID, ruleVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindCircuitBreaker indicates an expected call of UnbindCircuitBreaker
func (mr *MockCircuitBreakerStoreMockRecorder) UnbindCircuitBreaker(serviceID, ruleID, ruleVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindCircuitBreaker", reflect.TypeOf((*MockCircuitBreakerStore)(nil).UnbindCircuitBreaker), serviceID, ruleID, ruleVersion)
}

// DeleteTagCircuitBreaker mocks base method
func (m *MockCircuitBreakerStore) DeleteTagCircuitBreaker(id, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagCircuitBreaker", id, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagCircuitBreaker indicates an expected call of DeleteTagCircuitBreaker
func (mr *MockCircuitBreakerStoreMockRecorder) DeleteTagCircuitBreaker(id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagCircuitBreaker", reflect.TypeOf((*MockCircuitBreakerStore)(nil).DeleteTagCircuitBreaker), id, version)
}

// DeleteMasterCircuitBreaker mocks base method
func (m *MockCircuitBreakerStore) DeleteMasterCircuitBreaker(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMasterCircuitBreaker", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMasterCircuitBreaker indicates an expected call of DeleteMasterCircuitBreaker
func (mr *MockCircuitBreakerStoreMockRecorder) DeleteMasterCircuitBreaker(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMasterCircuitBreaker", reflect.TypeOf((*MockCircuitBreakerStore)(nil).DeleteMasterCircuitBreaker), id)
}

// UpdateCircuitBreaker mocks base method
func (m *MockCircuitBreakerStore) UpdateCircuitBreaker(circuitBraker *model.CircuitBreaker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCircuitBreaker", circuitBraker)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCircuitBreaker indicates an expected call of UpdateCircuitBreaker
func (mr *MockCircuitBreakerStoreMockRecorder) UpdateCircuitBreaker(circuitBraker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCircuitBreaker", reflect.TypeOf((*MockCircuitBreakerStore)(nil).UpdateCircuitBreaker), circuitBraker)
}

// GetCircuitBreaker mocks base method
func (m *MockCircuitBreakerStore) GetCircuitBreaker(id, version string) (*model.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreaker", id, version)
	ret0, _ := ret[0].(*model.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreaker indicates an expected call of GetCircuitBreaker
func (mr *MockCircuitBreakerStoreMockRecorder) GetCircuitBreaker(id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreaker", reflect.TypeOf((*MockCircuitBreakerStore)(nil).GetCircuitBreaker), id, version)
}

// GetCircuitBreakerVersions mocks base method
func (m *MockCircuitBreakerStore) GetCircuitBreakerVersions(id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerVersions", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakerVersions indicates an expected call of GetCircuitBreakerVersions
func (mr *MockCircuitBreakerStoreMockRecorder) GetCircuitBreakerVersions(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerVersions", reflect.TypeOf((*MockCircuitBreakerStore)(nil).GetCircuitBreakerVersions), id)
}

// GetCircuitBreakerMasterRelation mocks base method
func (m *MockCircuitBreakerStore) GetCircuitBreakerMasterRelation(ruleID string) ([]*model.CircuitBreakerRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerMasterRelation", ruleID)
	ret0, _ := ret[0].([]*model.CircuitBreakerRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakerMasterRelation indicates an expected call of GetCircuitBreakerMasterRelation
func (mr *MockCircuitBreakerStoreMockRecorder) GetCircuitBreakerMasterRelation(ruleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerMasterRelation", reflect.TypeOf((*MockCircuitBreakerStore)(nil).GetCircuitBreakerMasterRelation), ruleID)
}

// GetCircuitBreakerRelation mocks base method
func (m *MockCircuitBreakerStore) GetCircuitBreakerRelation(ruleID, ruleVersion string) ([]*model.CircuitBreakerRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerRelation", ruleID, ruleVersion)
	ret0, _ := ret[0].([]*model.CircuitBreakerRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakerRelation indicates an expected call of GetCircuitBreakerRelation
func (mr *MockCircuitBreakerStoreMockRecorder) GetCircuitBreakerRelation(ruleID, ruleVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerRelation", reflect.TypeOf((*MockCircuitBreakerStore)(nil).GetCircuitBreakerRelation), ruleID, ruleVersion)
}

// GetCircuitBreakerForCache mocks base method
func (m *MockCircuitBreakerStore) GetCircuitBreakerForCache(mtime time.Time, firstUpdate bool) ([]*model.ServiceWithCircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerForCache", mtime, firstUpdate)
	ret0, _ := ret[0].([]*model.ServiceWithCircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakerForCache indicates an expected call of GetCircuitBreakerForCache
func (mr *MockCircuitBreakerStoreMockRecorder) GetCircuitBreakerForCache(mtime, firstUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerForCache", reflect.TypeOf((*MockCircuitBreakerStore)(nil).GetCircuitBreakerForCache), mtime, firstUpdate)
}

// ListMasterCircuitBreakers mocks base method
func (m *MockCircuitBreakerStore) ListMasterCircuitBreakers(filters map[string]string, offset, limit uint32) (*model.CircuitBreakerDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMasterCircuitBreakers", filters, offset, limit)
	ret0, _ := ret[0].(*model.CircuitBreakerDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMasterCircuitBreakers indicates an expected call of ListMasterCircuitBreakers
func (mr *MockCircuitBreakerStoreMockRecorder) ListMasterCircuitBreakers(filters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMasterCircuitBreakers", reflect.TypeOf((*MockCircuitBreakerStore)(nil).ListMasterCircuitBreakers), filters, offset, limit)
}

// ListReleaseCircuitBreakers mocks base method
func (m *MockCircuitBreakerStore) ListReleaseCircuitBreakers(filters map[string]string, offset, limit uint32) (*model.CircuitBreakerDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleaseCircuitBreakers", filters, offset, limit)
	ret0, _ := ret[0].(*model.CircuitBreakerDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReleaseCircuitBreakers indicates an expected call of ListReleaseCircuitBreakers
func (mr *MockCircuitBreakerStoreMockRecorder) ListReleaseCircuitBreakers(filters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseCircuitBreakers", reflect.TypeOf((*MockCircuitBreakerStore)(nil).ListReleaseCircuitBreakers), filters, offset, limit)
}

// GetCircuitBreakersByService mocks base method
func (m *MockCircuitBreakerStore) GetCircuitBreakersByService(name, namespace string) (*model.CircuitBreaker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakersByService", name, namespace)
	ret0, _ := ret[0].(*model.CircuitBreaker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircuitBreakersByService indicates an expected call of GetCircuitBreakersByService
func (mr *MockCircuitBreakerStoreMockRecorder) GetCircuitBreakersByService(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakersByService", reflect.TypeOf((*MockCircuitBreakerStore)(nil).GetCircuitBreakersByService), name, namespace)
}

// MockPlatformStore is a mock of PlatformStore interface
type MockPlatformStore struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformStoreMockRecorder
}

// MockPlatformStoreMockRecorder is the mock recorder for MockPlatformStore
type MockPlatformStoreMockRecorder struct {
	mock *MockPlatformStore
}

// NewMockPlatformStore creates a new mock instance
func NewMockPlatformStore(ctrl *gomock.Controller) *MockPlatformStore {
	mock := &MockPlatformStore{ctrl: ctrl}
	mock.recorder = &MockPlatformStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlatformStore) EXPECT() *MockPlatformStoreMockRecorder {
	return m.recorder
}

// CreatePlatform mocks base method
func (m *MockPlatformStore) CreatePlatform(platform *model.Platform) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatform", platform)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlatform indicates an expected call of CreatePlatform
func (mr *MockPlatformStoreMockRecorder) CreatePlatform(platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatform", reflect.TypeOf((*MockPlatformStore)(nil).CreatePlatform), platform)
}

// UpdatePlatform mocks base method
func (m *MockPlatformStore) UpdatePlatform(platform *model.Platform) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlatform", platform)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlatform indicates an expected call of UpdatePlatform
func (mr *MockPlatformStoreMockRecorder) UpdatePlatform(platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatform", reflect.TypeOf((*MockPlatformStore)(nil).UpdatePlatform), platform)
}

// DeletePlatform mocks base method
func (m *MockPlatformStore) DeletePlatform(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlatform", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlatform indicates an expected call of DeletePlatform
func (mr *MockPlatformStoreMockRecorder) DeletePlatform(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatform", reflect.TypeOf((*MockPlatformStore)(nil).DeletePlatform), id)
}

// GetPlatformById mocks base method
func (m *MockPlatformStore) GetPlatformById(id string) (*model.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformById", id)
	ret0, _ := ret[0].(*model.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformById indicates an expected call of GetPlatformById
func (mr *MockPlatformStoreMockRecorder) GetPlatformById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformById", reflect.TypeOf((*MockPlatformStore)(nil).GetPlatformById), id)
}

// GetPlatforms mocks base method
func (m *MockPlatformStore) GetPlatforms(query map[string]string, offset, limit uint32) (uint32, []*model.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatforms", query, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.Platform)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPlatforms indicates an expected call of GetPlatforms
func (mr *MockPlatformStoreMockRecorder) GetPlatforms(query, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockPlatformStore)(nil).GetPlatforms), query, offset, limit)
}

// MockTransaction is a mock of Transaction interface
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// LockBootstrap mocks base method
func (m *MockTransaction) LockBootstrap(key, server string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockBootstrap", key, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockBootstrap indicates an expected call of LockBootstrap
func (mr *MockTransactionMockRecorder) LockBootstrap(key, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockBootstrap", reflect.TypeOf((*MockTransaction)(nil).LockBootstrap), key, server)
}

// LockNamespace mocks base method
func (m *MockTransaction) LockNamespace(name string) (*model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockNamespace", name)
	ret0, _ := ret[0].(*model.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockNamespace indicates an expected call of LockNamespace
func (mr *MockTransactionMockRecorder) LockNamespace(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockNamespace", reflect.TypeOf((*MockTransaction)(nil).LockNamespace), name)
}

// RLockNamespace mocks base method
func (m *MockTransaction) RLockNamespace(name string) (*model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RLockNamespace", name)
	ret0, _ := ret[0].(*model.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RLockNamespace indicates an expected call of RLockNamespace
func (mr *MockTransactionMockRecorder) RLockNamespace(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RLockNamespace", reflect.TypeOf((*MockTransaction)(nil).RLockNamespace), name)
}

// DeleteNamespace mocks base method
func (m *MockTransaction) DeleteNamespace(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace
func (mr *MockTransactionMockRecorder) DeleteNamespace(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockTransaction)(nil).DeleteNamespace), name)
}

// LockService mocks base method
func (m *MockTransaction) LockService(name, namespace string) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockService", name, namespace)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockService indicates an expected call of LockService
func (mr *MockTransactionMockRecorder) LockService(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockService", reflect.TypeOf((*MockTransaction)(nil).LockService), name, namespace)
}

// RLockService mocks base method
func (m *MockTransaction) RLockService(name, namespace string) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RLockService", name, namespace)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RLockService indicates an expected call of RLockService
func (mr *MockTransactionMockRecorder) RLockService(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RLockService", reflect.TypeOf((*MockTransaction)(nil).RLockService), name, namespace)
}

// BatchRLockServices mocks base method
func (m *MockTransaction) BatchRLockServices(ids map[string]bool) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchRLockServices", ids)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRLockServices indicates an expected call of BatchRLockServices
func (mr *MockTransactionMockRecorder) BatchRLockServices(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRLockServices", reflect.TypeOf((*MockTransaction)(nil).BatchRLockServices), ids)
}

// DeleteService mocks base method
func (m *MockTransaction) DeleteService(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockTransactionMockRecorder) DeleteService(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockTransaction)(nil).DeleteService), name, namespace)
}

// DeleteAliasWithSourceID mocks base method
func (m *MockTransaction) DeleteAliasWithSourceID(sourceServiceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAliasWithSourceID", sourceServiceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAliasWithSourceID indicates an expected call of DeleteAliasWithSourceID
func (mr *MockTransactionMockRecorder) DeleteAliasWithSourceID(sourceServiceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasWithSourceID", reflect.TypeOf((*MockTransaction)(nil).DeleteAliasWithSourceID), sourceServiceID)
}

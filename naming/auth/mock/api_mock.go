// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthority is a mock of Authority interface
type MockAuthority struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorityMockRecorder
}

// MockAuthorityMockRecorder is the mock recorder for MockAuthority
type MockAuthorityMockRecorder struct {
	mock *MockAuthority
}

// NewMockAuthority creates a new mock instance
func NewMockAuthority(ctrl *gomock.Controller) *MockAuthority {
	mock := &MockAuthority{ctrl: ctrl}
	mock.recorder = &MockAuthorityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthority) EXPECT() *MockAuthorityMockRecorder {
	return m.recorder
}

// VerifyToken mocks base method
func (m *MockAuthority) VerifyToken(actualToken string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", actualToken)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken
func (mr *MockAuthorityMockRecorder) VerifyToken(actualToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthority)(nil).VerifyToken), actualToken)
}

// VerifyNamespace mocks base method
func (m *MockAuthority) VerifyNamespace(expectToken, actualToken string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyNamespace", expectToken, actualToken)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyNamespace indicates an expected call of VerifyNamespace
func (mr *MockAuthorityMockRecorder) VerifyNamespace(expectToken, actualToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyNamespace", reflect.TypeOf((*MockAuthority)(nil).VerifyNamespace), expectToken, actualToken)
}

// VerifyService mocks base method
func (m *MockAuthority) VerifyService(expectToken, actualToken string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyService", expectToken, actualToken)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyService indicates an expected call of VerifyService
func (mr *MockAuthorityMockRecorder) VerifyService(expectToken, actualToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyService", reflect.TypeOf((*MockAuthority)(nil).VerifyService), expectToken, actualToken)
}

// VerifyInstance mocks base method
func (m *MockAuthority) VerifyInstance(expectToken, actualToken string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyInstance", expectToken, actualToken)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyInstance indicates an expected call of VerifyInstance
func (mr *MockAuthorityMockRecorder) VerifyInstance(expectToken, actualToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyInstance", reflect.TypeOf((*MockAuthority)(nil).VerifyInstance), expectToken, actualToken)
}

// VerifyRule mocks base method
func (m *MockAuthority) VerifyRule(expectToken, actualToken string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRule", expectToken, actualToken)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyRule indicates an expected call of VerifyRule
func (mr *MockAuthorityMockRecorder) VerifyRule(expectToken, actualToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRule", reflect.TypeOf((*MockAuthority)(nil).VerifyRule), expectToken, actualToken)
}

// VerifyPlatform mocks base method
func (m *MockAuthority) VerifyPlatform(expectToken, actualToken string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPlatform", expectToken, actualToken)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyPlatform indicates an expected call of VerifyPlatform
func (mr *MockAuthorityMockRecorder) VerifyPlatform(expectToken, actualToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPlatform", reflect.TypeOf((*MockAuthority)(nil).VerifyPlatform), expectToken, actualToken)
}

// VerifyMesh mocks base method
func (m *MockAuthority) VerifyMesh(expectToken, actualToken string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMesh", expectToken, actualToken)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyMesh indicates an expected call of VerifyMesh
func (mr *MockAuthorityMockRecorder) VerifyMesh(expectToken, actualToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMesh", reflect.TypeOf((*MockAuthority)(nil).VerifyMesh), expectToken, actualToken)
}

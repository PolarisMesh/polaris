// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ratelimit.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 限流资源
type Rule_Resource int32

const (
	// 针对QPS进行限流
	Rule_QPS Rule_Resource = 0
	// 针对并发数进行限流
	Rule_CONCURRENCY Rule_Resource = 1
)

var Rule_Resource_name = map[int32]string{
	0: "QPS",
	1: "CONCURRENCY",
}
var Rule_Resource_value = map[string]int32{
	"QPS":         0,
	"CONCURRENCY": 1,
}

func (x Rule_Resource) String() string {
	return proto.EnumName(Rule_Resource_name, int32(x))
}
func (Rule_Resource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{1, 0}
}

// 限流类型
// global全局限流(默认)或者local单机限流
type Rule_Type int32

const (
	Rule_GLOBAL Rule_Type = 0
	Rule_LOCAL  Rule_Type = 1
)

var Rule_Type_name = map[int32]string{
	0: "GLOBAL",
	1: "LOCAL",
}
var Rule_Type_value = map[string]int32{
	"GLOBAL": 0,
	"LOCAL":  1,
}

func (x Rule_Type) String() string {
	return proto.EnumName(Rule_Type_name, int32(x))
}
func (Rule_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{1, 1}
}

// 限流阈值模式
type Rule_AmountMode int32

const (
	Rule_GLOBAL_TOTAL  Rule_AmountMode = 0
	Rule_SHARE_EQUALLY Rule_AmountMode = 1
)

var Rule_AmountMode_name = map[int32]string{
	0: "GLOBAL_TOTAL",
	1: "SHARE_EQUALLY",
}
var Rule_AmountMode_value = map[string]int32{
	"GLOBAL_TOTAL":  0,
	"SHARE_EQUALLY": 1,
}

func (x Rule_AmountMode) String() string {
	return proto.EnumName(Rule_AmountMode_name, int32(x))
}
func (Rule_AmountMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{1, 2}
}

// 与限流集群连接失败时降级模式
type Rule_FailoverType int32

const (
	Rule_FAILOVER_LOCAL Rule_FailoverType = 0
	Rule_FAILOVER_PASS  Rule_FailoverType = 1
)

var Rule_FailoverType_name = map[int32]string{
	0: "FAILOVER_LOCAL",
	1: "FAILOVER_PASS",
}
var Rule_FailoverType_value = map[string]int32{
	"FAILOVER_LOCAL": 0,
	"FAILOVER_PASS":  1,
}

func (x Rule_FailoverType) String() string {
	return proto.EnumName(Rule_FailoverType_name, int32(x))
}
func (Rule_FailoverType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{1, 3}
}

// 同一服务下限流规则集合
type RateLimit struct {
	// 限流规则集合
	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// 限流规则汇总的revision信息
	Revision             *wrappers.StringValue `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RateLimit) Reset()         { *m = RateLimit{} }
func (m *RateLimit) String() string { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()    {}
func (*RateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{0}
}
func (m *RateLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimit.Unmarshal(m, b)
}
func (m *RateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimit.Marshal(b, m, deterministic)
}
func (dst *RateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimit.Merge(dst, src)
}
func (m *RateLimit) XXX_Size() int {
	return xxx_messageInfo_RateLimit.Size(m)
}
func (m *RateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimit proto.InternalMessageInfo

func (m *RateLimit) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *RateLimit) GetRevision() *wrappers.StringValue {
	if m != nil {
		return m.Revision
	}
	return nil
}

// 单个限流规则信息
type Rule struct {
	// 限流规则唯一标识
	Id *wrappers.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 限流规则所属服务名
	Service *wrappers.StringValue `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// 限流规则所属命名空间
	Namespace *wrappers.StringValue `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 可选，SUBSET标识
	Subset map[string]*MatchString `protobuf:"bytes,4,rep,name=subset,proto3" json:"subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 限流规则优先级，0值最高
	Priority *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Resource Rule_Resource         `protobuf:"varint,6,opt,name=resource,proto3,enum=v1.Rule_Resource" json:"resource,omitempty"`
	Type     Rule_Type             `protobuf:"varint,7,opt,name=type,proto3,enum=v1.Rule_Type" json:"type,omitempty"`
	// 业务标签集合，通过KV进行匹配，全部匹配才使用该规则
	Labels map[string]*MatchString `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 限流阈值
	// 可以有多个粒度的配置（比如同时针对秒级，分钟级，天级），匹配一个则进行限流
	// 全局限流模式下，该值为服务配额总量；单机限流模式下，该值为单个节点能处理的配额量
	Amounts []*Amount `protobuf:"bytes,9,rep,name=amounts,proto3" json:"amounts,omitempty"`
	// 限流动作，对应着客户端的插件名字
	Action *wrappers.StringValue `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
	// 是否停用该限流规则，默认启用
	Disable *wrappers.BoolValue `protobuf:"bytes,11,opt,name=disable,proto3" json:"disable,omitempty"`
	// 限流上报方式，同时支持按固定周期上报，以及达到配额百分比后上报
	Report *Report `protobuf:"bytes,12,opt,name=report,proto3" json:"report,omitempty"`
	// 限流规则创建时间
	Ctime *wrappers.StringValue `protobuf:"bytes,13,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// 限流规则修改时间
	Mtime *wrappers.StringValue `protobuf:"bytes,14,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// 限流规则revision信息
	Revision *wrappers.StringValue `protobuf:"bytes,15,opt,name=revision,proto3" json:"revision,omitempty"`
	// 服务的TOKEN信息，仅用于控制台，discover接口不下发
	ServiceToken *wrappers.StringValue `protobuf:"bytes,16,opt,name=service_token,proto3" json:"service_token,omitempty"`
	// 配额调整算法
	Adjuster *AmountAdjuster `protobuf:"bytes,17,opt,name=adjuster,proto3" json:"adjuster,omitempty"`
	// 通配符是否合并计算，默认分开计数
	RegexCombine *wrappers.BoolValue `protobuf:"bytes,18,opt,name=regex_combine,json=regexCombine,proto3" json:"regex_combine,omitempty"`
	AmountMode   Rule_AmountMode     `protobuf:"varint,19,opt,name=amount_mode,json=amountMode,proto3,enum=v1.Rule_AmountMode" json:"amount_mode,omitempty"`
	Failover     Rule_FailoverType   `protobuf:"varint,20,opt,name=failover,proto3,enum=v1.Rule_FailoverType" json:"failover,omitempty"`
	// 分布式限流服务集群
	Cluster *RateLimitCluster `protobuf:"bytes,21,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// 被调接口名
	Method               *MatchString `protobuf:"bytes,22,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{1}
}
func (m *Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rule.Unmarshal(m, b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
}
func (dst *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(dst, src)
}
func (m *Rule) XXX_Size() int {
	return xxx_messageInfo_Rule.Size(m)
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetId() *wrappers.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Rule) GetService() *wrappers.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *Rule) GetNamespace() *wrappers.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Rule) GetSubset() map[string]*MatchString {
	if m != nil {
		return m.Subset
	}
	return nil
}

func (m *Rule) GetPriority() *wrappers.UInt32Value {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *Rule) GetResource() Rule_Resource {
	if m != nil {
		return m.Resource
	}
	return Rule_QPS
}

func (m *Rule) GetType() Rule_Type {
	if m != nil {
		return m.Type
	}
	return Rule_GLOBAL
}

func (m *Rule) GetLabels() map[string]*MatchString {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Rule) GetAmounts() []*Amount {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *Rule) GetAction() *wrappers.StringValue {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Rule) GetDisable() *wrappers.BoolValue {
	if m != nil {
		return m.Disable
	}
	return nil
}

func (m *Rule) GetReport() *Report {
	if m != nil {
		return m.Report
	}
	return nil
}

func (m *Rule) GetCtime() *wrappers.StringValue {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *Rule) GetMtime() *wrappers.StringValue {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *Rule) GetRevision() *wrappers.StringValue {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *Rule) GetServiceToken() *wrappers.StringValue {
	if m != nil {
		return m.ServiceToken
	}
	return nil
}

func (m *Rule) GetAdjuster() *AmountAdjuster {
	if m != nil {
		return m.Adjuster
	}
	return nil
}

func (m *Rule) GetRegexCombine() *wrappers.BoolValue {
	if m != nil {
		return m.RegexCombine
	}
	return nil
}

func (m *Rule) GetAmountMode() Rule_AmountMode {
	if m != nil {
		return m.AmountMode
	}
	return Rule_GLOBAL_TOTAL
}

func (m *Rule) GetFailover() Rule_FailoverType {
	if m != nil {
		return m.Failover
	}
	return Rule_FAILOVER_LOCAL
}

func (m *Rule) GetCluster() *RateLimitCluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *Rule) GetMethod() *MatchString {
	if m != nil {
		return m.Method
	}
	return nil
}

// 分布式限流服务集群
type RateLimitCluster struct {
	Service *wrappers.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// 限流规则所属命名空间
	Namespace            *wrappers.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RateLimitCluster) Reset()         { *m = RateLimitCluster{} }
func (m *RateLimitCluster) String() string { return proto.CompactTextString(m) }
func (*RateLimitCluster) ProtoMessage()    {}
func (*RateLimitCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{2}
}
func (m *RateLimitCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitCluster.Unmarshal(m, b)
}
func (m *RateLimitCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitCluster.Marshal(b, m, deterministic)
}
func (dst *RateLimitCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitCluster.Merge(dst, src)
}
func (m *RateLimitCluster) XXX_Size() int {
	return xxx_messageInfo_RateLimitCluster.Size(m)
}
func (m *RateLimitCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitCluster.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitCluster proto.InternalMessageInfo

func (m *RateLimitCluster) GetService() *wrappers.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *RateLimitCluster) GetNamespace() *wrappers.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

// 限流配额
type Amount struct {
	// 时间周期内的最大配额数
	MaxAmount *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=maxAmount,proto3" json:"maxAmount,omitempty"`
	// 配额生效的时间周期，必须大于等于1s
	ValidDuration *duration.Duration `protobuf:"bytes,2,opt,name=validDuration,proto3" json:"validDuration,omitempty"`
	// 请求统计精度
	Precision *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=precision,proto3" json:"precision,omitempty"`
	// 可选，起始限流阈值，爬坡起始值
	StartAmount *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=startAmount,proto3" json:"startAmount,omitempty"`
	// 可选，最小限流阈值，降低时最小值
	MinAmount            *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Amount) Reset()         { *m = Amount{} }
func (m *Amount) String() string { return proto.CompactTextString(m) }
func (*Amount) ProtoMessage()    {}
func (*Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{3}
}
func (m *Amount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Amount.Unmarshal(m, b)
}
func (m *Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Amount.Marshal(b, m, deterministic)
}
func (dst *Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amount.Merge(dst, src)
}
func (m *Amount) XXX_Size() int {
	return xxx_messageInfo_Amount.Size(m)
}
func (m *Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_Amount proto.InternalMessageInfo

func (m *Amount) GetMaxAmount() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxAmount
	}
	return nil
}

func (m *Amount) GetValidDuration() *duration.Duration {
	if m != nil {
		return m.ValidDuration
	}
	return nil
}

func (m *Amount) GetPrecision() *wrappers.UInt32Value {
	if m != nil {
		return m.Precision
	}
	return nil
}

func (m *Amount) GetStartAmount() *wrappers.UInt32Value {
	if m != nil {
		return m.StartAmount
	}
	return nil
}

func (m *Amount) GetMinAmount() *wrappers.UInt32Value {
	if m != nil {
		return m.MinAmount
	}
	return nil
}

// 限流上报方式
type Report struct {
	// 配额固定上报周期，单位毫秒
	Interval *duration.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// 使用了百分之多少配额后启动一次实时上报，值范围(0,100]
	AmountPercent        *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=amountPercent,proto3" json:"amountPercent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Report) Reset()         { *m = Report{} }
func (m *Report) String() string { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()    {}
func (*Report) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{4}
}
func (m *Report) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Report.Unmarshal(m, b)
}
func (m *Report) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Report.Marshal(b, m, deterministic)
}
func (dst *Report) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Report.Merge(dst, src)
}
func (m *Report) XXX_Size() int {
	return xxx_messageInfo_Report.Size(m)
}
func (m *Report) XXX_DiscardUnknown() {
	xxx_messageInfo_Report.DiscardUnknown(m)
}

var xxx_messageInfo_Report proto.InternalMessageInfo

func (m *Report) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *Report) GetAmountPercent() *wrappers.UInt32Value {
	if m != nil {
		return m.AmountPercent
	}
	return nil
}

// 配额调整算法
type AmountAdjuster struct {
	Climb                *ClimbConfig `protobuf:"bytes,1,opt,name=climb,proto3" json:"climb,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AmountAdjuster) Reset()         { *m = AmountAdjuster{} }
func (m *AmountAdjuster) String() string { return proto.CompactTextString(m) }
func (*AmountAdjuster) ProtoMessage()    {}
func (*AmountAdjuster) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{5}
}
func (m *AmountAdjuster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AmountAdjuster.Unmarshal(m, b)
}
func (m *AmountAdjuster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AmountAdjuster.Marshal(b, m, deterministic)
}
func (dst *AmountAdjuster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmountAdjuster.Merge(dst, src)
}
func (m *AmountAdjuster) XXX_Size() int {
	return xxx_messageInfo_AmountAdjuster.Size(m)
}
func (m *AmountAdjuster) XXX_DiscardUnknown() {
	xxx_messageInfo_AmountAdjuster.DiscardUnknown(m)
}

var xxx_messageInfo_AmountAdjuster proto.InternalMessageInfo

func (m *AmountAdjuster) GetClimb() *ClimbConfig {
	if m != nil {
		return m.Climb
	}
	return nil
}

// 限流调整算法Climb相关配置
type ClimbConfig struct {
	Enable               *wrappers.BoolValue          `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Metric               *ClimbConfig_MetricConfig    `protobuf:"bytes,2,opt,name=metric,proto3" json:"metric,omitempty"`
	Policy               *ClimbConfig_TriggerPolicy   `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	Throttling           *ClimbConfig_ClimbThrottling `protobuf:"bytes,4,opt,name=throttling,proto3" json:"throttling,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ClimbConfig) Reset()         { *m = ClimbConfig{} }
func (m *ClimbConfig) String() string { return proto.CompactTextString(m) }
func (*ClimbConfig) ProtoMessage()    {}
func (*ClimbConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{6}
}
func (m *ClimbConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClimbConfig.Unmarshal(m, b)
}
func (m *ClimbConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClimbConfig.Marshal(b, m, deterministic)
}
func (dst *ClimbConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClimbConfig.Merge(dst, src)
}
func (m *ClimbConfig) XXX_Size() int {
	return xxx_messageInfo_ClimbConfig.Size(m)
}
func (m *ClimbConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClimbConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClimbConfig proto.InternalMessageInfo

func (m *ClimbConfig) GetEnable() *wrappers.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ClimbConfig) GetMetric() *ClimbConfig_MetricConfig {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *ClimbConfig) GetPolicy() *ClimbConfig_TriggerPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *ClimbConfig) GetThrottling() *ClimbConfig_ClimbThrottling {
	if m != nil {
		return m.Throttling
	}
	return nil
}

// 限流数据统计配置
type ClimbConfig_MetricConfig struct {
	// 限流数据度量周期，默认60s
	Window *duration.Duration `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	// 数据统计精度，决定数据度量的最小周期，度量滑窗的步长=window/precision
	Precision *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=precision,proto3" json:"precision,omitempty"`
	// 上报周期，默认20s
	ReportInterval       *duration.Duration `protobuf:"bytes,3,opt,name=reportInterval,proto3" json:"reportInterval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ClimbConfig_MetricConfig) Reset()         { *m = ClimbConfig_MetricConfig{} }
func (m *ClimbConfig_MetricConfig) String() string { return proto.CompactTextString(m) }
func (*ClimbConfig_MetricConfig) ProtoMessage()    {}
func (*ClimbConfig_MetricConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{6, 0}
}
func (m *ClimbConfig_MetricConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClimbConfig_MetricConfig.Unmarshal(m, b)
}
func (m *ClimbConfig_MetricConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClimbConfig_MetricConfig.Marshal(b, m, deterministic)
}
func (dst *ClimbConfig_MetricConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClimbConfig_MetricConfig.Merge(dst, src)
}
func (m *ClimbConfig_MetricConfig) XXX_Size() int {
	return xxx_messageInfo_ClimbConfig_MetricConfig.Size(m)
}
func (m *ClimbConfig_MetricConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClimbConfig_MetricConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClimbConfig_MetricConfig proto.InternalMessageInfo

func (m *ClimbConfig_MetricConfig) GetWindow() *duration.Duration {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *ClimbConfig_MetricConfig) GetPrecision() *wrappers.UInt32Value {
	if m != nil {
		return m.Precision
	}
	return nil
}

func (m *ClimbConfig_MetricConfig) GetReportInterval() *duration.Duration {
	if m != nil {
		return m.ReportInterval
	}
	return nil
}

// 触发调整的策略
type ClimbConfig_TriggerPolicy struct {
	ErrorRate            *ClimbConfig_TriggerPolicy_ErrorRate `protobuf:"bytes,1,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
	SlowRate             *ClimbConfig_TriggerPolicy_SlowRate  `protobuf:"bytes,2,opt,name=slowRate,proto3" json:"slowRate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ClimbConfig_TriggerPolicy) Reset()         { *m = ClimbConfig_TriggerPolicy{} }
func (m *ClimbConfig_TriggerPolicy) String() string { return proto.CompactTextString(m) }
func (*ClimbConfig_TriggerPolicy) ProtoMessage()    {}
func (*ClimbConfig_TriggerPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{6, 1}
}
func (m *ClimbConfig_TriggerPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy.Unmarshal(m, b)
}
func (m *ClimbConfig_TriggerPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy.Marshal(b, m, deterministic)
}
func (dst *ClimbConfig_TriggerPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClimbConfig_TriggerPolicy.Merge(dst, src)
}
func (m *ClimbConfig_TriggerPolicy) XXX_Size() int {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy.Size(m)
}
func (m *ClimbConfig_TriggerPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_ClimbConfig_TriggerPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_ClimbConfig_TriggerPolicy proto.InternalMessageInfo

func (m *ClimbConfig_TriggerPolicy) GetErrorRate() *ClimbConfig_TriggerPolicy_ErrorRate {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy) GetSlowRate() *ClimbConfig_TriggerPolicy_SlowRate {
	if m != nil {
		return m.SlowRate
	}
	return nil
}

// 错误率触发调整配置
type ClimbConfig_TriggerPolicy_ErrorRate struct {
	Enable                 *wrappers.BoolValue                                  `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	RequestVolumeThreshold *wrappers.UInt32Value                                `protobuf:"bytes,2,opt,name=requestVolumeThreshold,proto3" json:"requestVolumeThreshold,omitempty"`
	ErrorRate              *wrappers.Int32Value                                 `protobuf:"bytes,3,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
	Specials               []*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig `protobuf:"bytes,4,rep,name=specials,proto3" json:"specials,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                             `json:"-"`
	XXX_unrecognized       []byte                                               `json:"-"`
	XXX_sizecache          int32                                                `json:"-"`
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate) Reset()         { *m = ClimbConfig_TriggerPolicy_ErrorRate{} }
func (m *ClimbConfig_TriggerPolicy_ErrorRate) String() string { return proto.CompactTextString(m) }
func (*ClimbConfig_TriggerPolicy_ErrorRate) ProtoMessage()    {}
func (*ClimbConfig_TriggerPolicy_ErrorRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{6, 1, 0}
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate.Unmarshal(m, b)
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate.Marshal(b, m, deterministic)
}
func (dst *ClimbConfig_TriggerPolicy_ErrorRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate.Merge(dst, src)
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate) XXX_Size() int {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate.Size(m)
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate.DiscardUnknown(m)
}

var xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate proto.InternalMessageInfo

func (m *ClimbConfig_TriggerPolicy_ErrorRate) GetEnable() *wrappers.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate) GetRequestVolumeThreshold() *wrappers.UInt32Value {
	if m != nil {
		return m.RequestVolumeThreshold
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate) GetErrorRate() *wrappers.Int32Value {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate) GetSpecials() []*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig {
	if m != nil {
		return m.Specials
	}
	return nil
}

// 特殊错误码触发调整配置
type ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig struct {
	Type                 *wrappers.StringValue  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ErrorCodes           []*wrappers.Int64Value `protobuf:"bytes,2,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"`
	ErrorRate            *wrappers.Int32Value   `protobuf:"bytes,3,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) Reset() {
	*m = ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig{}
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) String() string {
	return proto.CompactTextString(m)
}
func (*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) ProtoMessage() {}
func (*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{6, 1, 0, 0}
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig.Unmarshal(m, b)
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig.Marshal(b, m, deterministic)
}
func (dst *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig.Merge(dst, src)
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) XXX_Size() int {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig.Size(m)
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig proto.InternalMessageInfo

func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetType() *wrappers.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetErrorCodes() []*wrappers.Int64Value {
	if m != nil {
		return m.ErrorCodes
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetErrorRate() *wrappers.Int32Value {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

// 慢调用触发调整配置
type ClimbConfig_TriggerPolicy_SlowRate struct {
	Enable               *wrappers.BoolValue  `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	MaxRt                *duration.Duration   `protobuf:"bytes,2,opt,name=maxRt,proto3" json:"maxRt,omitempty"`
	SlowRate             *wrappers.Int32Value `protobuf:"bytes,3,opt,name=slowRate,proto3" json:"slowRate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClimbConfig_TriggerPolicy_SlowRate) Reset()         { *m = ClimbConfig_TriggerPolicy_SlowRate{} }
func (m *ClimbConfig_TriggerPolicy_SlowRate) String() string { return proto.CompactTextString(m) }
func (*ClimbConfig_TriggerPolicy_SlowRate) ProtoMessage()    {}
func (*ClimbConfig_TriggerPolicy_SlowRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{6, 1, 1}
}
func (m *ClimbConfig_TriggerPolicy_SlowRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy_SlowRate.Unmarshal(m, b)
}
func (m *ClimbConfig_TriggerPolicy_SlowRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy_SlowRate.Marshal(b, m, deterministic)
}
func (dst *ClimbConfig_TriggerPolicy_SlowRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClimbConfig_TriggerPolicy_SlowRate.Merge(dst, src)
}
func (m *ClimbConfig_TriggerPolicy_SlowRate) XXX_Size() int {
	return xxx_messageInfo_ClimbConfig_TriggerPolicy_SlowRate.Size(m)
}
func (m *ClimbConfig_TriggerPolicy_SlowRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClimbConfig_TriggerPolicy_SlowRate.DiscardUnknown(m)
}

var xxx_messageInfo_ClimbConfig_TriggerPolicy_SlowRate proto.InternalMessageInfo

func (m *ClimbConfig_TriggerPolicy_SlowRate) GetEnable() *wrappers.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_SlowRate) GetMaxRt() *duration.Duration {
	if m != nil {
		return m.MaxRt
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_SlowRate) GetSlowRate() *wrappers.Int32Value {
	if m != nil {
		return m.SlowRate
	}
	return nil
}

// 爬坡调整相关参数
type ClimbConfig_ClimbThrottling struct {
	ColdBelowTuneDownRate  *wrappers.Int32Value `protobuf:"bytes,1,opt,name=coldBelowTuneDownRate,proto3" json:"coldBelowTuneDownRate,omitempty"`
	ColdBelowTuneUpRate    *wrappers.Int32Value `protobuf:"bytes,2,opt,name=coldBelowTuneUpRate,proto3" json:"coldBelowTuneUpRate,omitempty"`
	ColdAboveTuneDownRate  *wrappers.Int32Value `protobuf:"bytes,3,opt,name=coldAboveTuneDownRate,proto3" json:"coldAboveTuneDownRate,omitempty"`
	ColdAboveTuneUpRate    *wrappers.Int32Value `protobuf:"bytes,4,opt,name=coldAboveTuneUpRate,proto3" json:"coldAboveTuneUpRate,omitempty"`
	LimitThresholdToTuneUp *wrappers.Int32Value `protobuf:"bytes,5,opt,name=limitThresholdToTuneUp,proto3" json:"limitThresholdToTuneUp,omitempty"`
	JudgeDuration          *duration.Duration   `protobuf:"bytes,6,opt,name=judgeDuration,proto3" json:"judgeDuration,omitempty"`
	TuneUpPeriod           *wrappers.Int32Value `protobuf:"bytes,7,opt,name=tuneUpPeriod,proto3" json:"tuneUpPeriod,omitempty"`
	TuneDownPeriod         *wrappers.Int32Value `protobuf:"bytes,8,opt,name=tuneDownPeriod,proto3" json:"tuneDownPeriod,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}             `json:"-"`
	XXX_unrecognized       []byte               `json:"-"`
	XXX_sizecache          int32                `json:"-"`
}

func (m *ClimbConfig_ClimbThrottling) Reset()         { *m = ClimbConfig_ClimbThrottling{} }
func (m *ClimbConfig_ClimbThrottling) String() string { return proto.CompactTextString(m) }
func (*ClimbConfig_ClimbThrottling) ProtoMessage()    {}
func (*ClimbConfig_ClimbThrottling) Descriptor() ([]byte, []int) {
	return fileDescriptor_ratelimit_2b495c7362132910, []int{6, 2}
}
func (m *ClimbConfig_ClimbThrottling) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClimbConfig_ClimbThrottling.Unmarshal(m, b)
}
func (m *ClimbConfig_ClimbThrottling) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClimbConfig_ClimbThrottling.Marshal(b, m, deterministic)
}
func (dst *ClimbConfig_ClimbThrottling) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClimbConfig_ClimbThrottling.Merge(dst, src)
}
func (m *ClimbConfig_ClimbThrottling) XXX_Size() int {
	return xxx_messageInfo_ClimbConfig_ClimbThrottling.Size(m)
}
func (m *ClimbConfig_ClimbThrottling) XXX_DiscardUnknown() {
	xxx_messageInfo_ClimbConfig_ClimbThrottling.DiscardUnknown(m)
}

var xxx_messageInfo_ClimbConfig_ClimbThrottling proto.InternalMessageInfo

func (m *ClimbConfig_ClimbThrottling) GetColdBelowTuneDownRate() *wrappers.Int32Value {
	if m != nil {
		return m.ColdBelowTuneDownRate
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetColdBelowTuneUpRate() *wrappers.Int32Value {
	if m != nil {
		return m.ColdBelowTuneUpRate
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetColdAboveTuneDownRate() *wrappers.Int32Value {
	if m != nil {
		return m.ColdAboveTuneDownRate
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetColdAboveTuneUpRate() *wrappers.Int32Value {
	if m != nil {
		return m.ColdAboveTuneUpRate
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetLimitThresholdToTuneUp() *wrappers.Int32Value {
	if m != nil {
		return m.LimitThresholdToTuneUp
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetJudgeDuration() *duration.Duration {
	if m != nil {
		return m.JudgeDuration
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetTuneUpPeriod() *wrappers.Int32Value {
	if m != nil {
		return m.TuneUpPeriod
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetTuneDownPeriod() *wrappers.Int32Value {
	if m != nil {
		return m.TuneDownPeriod
	}
	return nil
}

func init() {
	proto.RegisterType((*RateLimit)(nil), "v1.RateLimit")
	proto.RegisterType((*Rule)(nil), "v1.Rule")
	proto.RegisterMapType((map[string]*MatchString)(nil), "v1.Rule.LabelsEntry")
	proto.RegisterMapType((map[string]*MatchString)(nil), "v1.Rule.SubsetEntry")
	proto.RegisterType((*RateLimitCluster)(nil), "v1.RateLimitCluster")
	proto.RegisterType((*Amount)(nil), "v1.Amount")
	proto.RegisterType((*Report)(nil), "v1.Report")
	proto.RegisterType((*AmountAdjuster)(nil), "v1.AmountAdjuster")
	proto.RegisterType((*ClimbConfig)(nil), "v1.ClimbConfig")
	proto.RegisterType((*ClimbConfig_MetricConfig)(nil), "v1.ClimbConfig.MetricConfig")
	proto.RegisterType((*ClimbConfig_TriggerPolicy)(nil), "v1.ClimbConfig.TriggerPolicy")
	proto.RegisterType((*ClimbConfig_TriggerPolicy_ErrorRate)(nil), "v1.ClimbConfig.TriggerPolicy.ErrorRate")
	proto.RegisterType((*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig)(nil), "v1.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig")
	proto.RegisterType((*ClimbConfig_TriggerPolicy_SlowRate)(nil), "v1.ClimbConfig.TriggerPolicy.SlowRate")
	proto.RegisterType((*ClimbConfig_ClimbThrottling)(nil), "v1.ClimbConfig.ClimbThrottling")
	proto.RegisterEnum("v1.Rule_Resource", Rule_Resource_name, Rule_Resource_value)
	proto.RegisterEnum("v1.Rule_Type", Rule_Type_name, Rule_Type_value)
	proto.RegisterEnum("v1.Rule_AmountMode", Rule_AmountMode_name, Rule_AmountMode_value)
	proto.RegisterEnum("v1.Rule_FailoverType", Rule_FailoverType_name, Rule_FailoverType_value)
}

func init() { proto.RegisterFile("ratelimit.proto", fileDescriptor_ratelimit_2b495c7362132910) }

var fileDescriptor_ratelimit_2b495c7362132910 = []byte{
	// 1341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x72, 0xdb, 0x36,
	0x13, 0x0d, 0xf5, 0x43, 0x4b, 0x2b, 0x4b, 0x56, 0x90, 0x9f, 0xe1, 0xa7, 0xaf, 0x49, 0x53, 0x4d,
	0xda, 0xe4, 0x22, 0x55, 0x6a, 0xc7, 0x4e, 0xd2, 0x74, 0xa6, 0x19, 0x59, 0x51, 0xda, 0x74, 0xe4,
	0xd8, 0x86, 0xe4, 0xcc, 0xf4, 0xca, 0x43, 0x91, 0x88, 0x8c, 0x84, 0x22, 0x54, 0x10, 0x92, 0xe3,
	0xeb, 0xce, 0xf4, 0x51, 0xda, 0xbe, 0x42, 0x2f, 0x3a, 0xd3, 0x47, 0xe8, 0x1b, 0xf4, 0x19, 0xfa,
	0x06, 0x1d, 0x02, 0x20, 0x45, 0xca, 0xb1, 0xc5, 0x38, 0x77, 0x14, 0xf6, 0x9c, 0xdd, 0x83, 0xdd,
	0xc5, 0x02, 0x82, 0x35, 0x6e, 0x0b, 0xe2, 0xd1, 0x31, 0x15, 0xad, 0x09, 0x67, 0x82, 0xa1, 0xdc,
	0x6c, 0xbd, 0x71, 0x73, 0xc4, 0xd8, 0xc8, 0x23, 0xf7, 0xe5, 0xca, 0x70, 0xfa, 0xfa, 0xfe, 0x31,
	0xb7, 0x27, 0x13, 0xc2, 0x03, 0x85, 0x39, 0x6d, 0x77, 0xa7, 0xdc, 0x16, 0x94, 0xf9, 0xda, 0x5e,
	0x19, 0x33, 0x97, 0x78, 0xea, 0x47, 0x93, 0x40, 0x19, 0xdb, 0x82, 0xf4, 0xc2, 0x18, 0xe8, 0x26,
	0x14, 0xf9, 0xd4, 0x23, 0x81, 0x65, 0xdc, 0xca, 0xdf, 0xad, 0x6c, 0x94, 0x5a, 0xb3, 0xf5, 0x16,
	0x9e, 0x7a, 0x04, 0xab, 0x65, 0xf4, 0x18, 0x4a, 0x9c, 0xcc, 0x68, 0x40, 0x99, 0x6f, 0xe5, 0x6e,
	0x19, 0x77, 0x2b, 0x1b, 0x9f, 0xb4, 0x54, 0xb0, 0x56, 0x14, 0xac, 0xd5, 0x17, 0x9c, 0xfa, 0xa3,
	0x57, 0xb6, 0x37, 0x25, 0x38, 0x46, 0x37, 0x7f, 0xad, 0x40, 0x21, 0xf4, 0x84, 0xee, 0x41, 0x8e,
	0xba, 0x96, 0x91, 0x81, 0x9c, 0xa3, 0x2e, 0x7a, 0x08, 0x2b, 0x01, 0xe1, 0x33, 0xea, 0x90, 0x4c,
	0xf1, 0x22, 0x30, 0x7a, 0x02, 0x65, 0xdf, 0x1e, 0x93, 0x60, 0x62, 0x3b, 0xc4, 0xca, 0x67, 0x60,
	0xce, 0xe1, 0xe8, 0x1e, 0x98, 0xc1, 0x74, 0x18, 0x10, 0x61, 0x15, 0x64, 0x16, 0xae, 0x46, 0x59,
	0x68, 0xf5, 0xe5, 0x72, 0xd7, 0x17, 0xfc, 0x04, 0x6b, 0x4c, 0x98, 0x92, 0x09, 0xa7, 0x8c, 0x53,
	0x71, 0x62, 0x15, 0xcf, 0x08, 0x74, 0xf0, 0xc2, 0x17, 0x0f, 0x36, 0x74, 0x4a, 0x22, 0x34, 0xfa,
	0x32, 0x4c, 0x66, 0xc0, 0xa6, 0xdc, 0x21, 0x96, 0x79, 0xcb, 0xb8, 0x5b, 0xdb, 0xb8, 0x1c, 0x47,
	0xc2, 0xda, 0x80, 0x63, 0x08, 0xfa, 0x0c, 0x0a, 0xe2, 0x64, 0x42, 0xac, 0x15, 0x09, 0xad, 0xc6,
	0xd0, 0xc1, 0xc9, 0x84, 0x60, 0x69, 0x0a, 0x95, 0x7b, 0xf6, 0x90, 0x78, 0x81, 0x55, 0x5a, 0x50,
	0xde, 0x93, 0xcb, 0x5a, 0xb9, 0xc2, 0xa0, 0xdb, 0xb0, 0x62, 0x8f, 0xd9, 0xd4, 0x17, 0x81, 0x55,
	0x96, 0x70, 0x08, 0xe1, 0x6d, 0xb9, 0x84, 0x23, 0x13, 0xda, 0x04, 0xd3, 0x76, 0xc2, 0xe6, 0xb1,
	0x20, 0x43, 0x1a, 0x35, 0x16, 0x6d, 0xc2, 0x8a, 0x4b, 0x03, 0x7b, 0xe8, 0x11, 0xab, 0x22, 0x69,
	0x8d, 0x53, 0xb4, 0x6d, 0xc6, 0x3c, 0x5d, 0x35, 0x0d, 0x45, 0x4d, 0x30, 0x39, 0x99, 0x30, 0x2e,
	0xac, 0x55, 0x49, 0x92, 0x82, 0xb0, 0x5c, 0xc1, 0xda, 0x82, 0x36, 0xa0, 0xe8, 0x08, 0x3a, 0x26,
	0x56, 0x35, 0x83, 0x1c, 0x05, 0x0d, 0x39, 0x63, 0xc9, 0xa9, 0x65, 0xe1, 0x48, 0x68, 0xaa, 0xd5,
	0xd7, 0x3e, 0xa4, 0xd5, 0xd1, 0x36, 0x54, 0x75, 0x1b, 0x1e, 0x0a, 0xf6, 0x96, 0xf8, 0x56, 0x3d,
	0x03, 0x3d, 0x4d, 0x41, 0x2d, 0x28, 0xd9, 0xee, 0x9b, 0x69, 0x20, 0x08, 0xb7, 0x2e, 0x4b, 0x3a,
	0x9a, 0x17, 0xa7, 0xad, 0x2d, 0x38, 0xc6, 0xa0, 0xa7, 0x50, 0xe5, 0x64, 0x44, 0xde, 0x1d, 0x3a,
	0x6c, 0x3c, 0xa4, 0x3e, 0xb1, 0xd0, 0xd2, 0xac, 0xaf, 0x4a, 0x42, 0x47, 0xe1, 0xd1, 0x26, 0x54,
	0x54, 0xc5, 0x0f, 0xc3, 0xe1, 0x60, 0x5d, 0x91, 0x4d, 0x76, 0x25, 0xee, 0x1f, 0x15, 0x78, 0x87,
	0xb9, 0x04, 0x83, 0x1d, 0x7f, 0xa3, 0x75, 0x28, 0xbd, 0xb6, 0xa9, 0xc7, 0x66, 0x84, 0x5b, 0x57,
	0x25, 0xe5, 0x5a, 0x4c, 0x79, 0xae, 0x0d, 0xb2, 0x3f, 0x63, 0x18, 0x6a, 0xc1, 0x8a, 0xe3, 0xa9,
	0x8d, 0x5d, 0x93, 0x1a, 0x55, 0x93, 0x46, 0x23, 0xa8, 0xa3, 0x6c, 0x38, 0x02, 0xa1, 0x3b, 0x60,
	0x8e, 0x89, 0x38, 0x62, 0xae, 0x75, 0x5d, 0xc2, 0xd7, 0x42, 0xf8, 0x8e, 0x2d, 0x9c, 0x23, 0x95,
	0x3e, 0xac, 0xcd, 0x8d, 0x1f, 0xa0, 0x92, 0x38, 0x9f, 0xa8, 0x0e, 0xf9, 0xb7, 0xe4, 0x44, 0x0e,
	0x9a, 0x32, 0x0e, 0x3f, 0xd1, 0xe7, 0x50, 0x9c, 0x85, 0x3b, 0xd7, 0x93, 0xe4, 0x94, 0x23, 0x65,
	0x7d, 0x92, 0x7b, 0x6c, 0x84, 0xbe, 0x12, 0x27, 0xe6, 0xa3, 0x7c, 0x35, 0x6f, 0x43, 0x29, 0x3a,
	0xcd, 0x68, 0x05, 0xf2, 0xfb, 0x7b, 0xfd, 0xfa, 0x25, 0xb4, 0x06, 0x95, 0xce, 0xee, 0xcb, 0xce,
	0x01, 0xc6, 0xdd, 0x97, 0x9d, 0x1f, 0xeb, 0x46, 0xf3, 0x06, 0x14, 0xc2, 0x44, 0x21, 0x00, 0xf3,
	0xbb, 0xde, 0xee, 0x76, 0xbb, 0x57, 0xbf, 0x84, 0xca, 0x50, 0xec, 0xed, 0x76, 0xda, 0xbd, 0xba,
	0xd1, 0x5c, 0x07, 0x98, 0x97, 0x00, 0xd5, 0x61, 0x55, 0x81, 0x0e, 0x07, 0xbb, 0x03, 0x09, 0xbd,
	0x0c, 0xd5, 0xfe, 0xf7, 0x6d, 0xdc, 0x3d, 0xec, 0xee, 0x1f, 0xb4, 0x7b, 0xbd, 0xd0, 0xe3, 0x16,
	0xac, 0x26, 0x4b, 0x80, 0x10, 0xd4, 0x9e, 0xb7, 0x5f, 0xf4, 0x76, 0x5f, 0x75, 0xf1, 0xa1, 0x72,
	0x2b, 0x69, 0xf1, 0xda, 0x5e, 0xbb, 0xdf, 0xaf, 0x1b, 0xcd, 0x5f, 0x0c, 0xa8, 0x2f, 0x56, 0x23,
	0x39, 0x86, 0x8d, 0x0b, 0x8f, 0xe1, 0xdc, 0x07, 0x8d, 0xe1, 0xe6, 0x9f, 0x39, 0x30, 0xd5, 0x9e,
	0x43, 0x37, 0x63, 0xfb, 0x9d, 0xfa, 0x71, 0xa6, 0x80, 0xe4, 0x90, 0x9d, 0xc3, 0xc3, 0x93, 0x31,
	0xb3, 0x3d, 0xea, 0x3e, 0xd3, 0x77, 0xa0, 0x96, 0xf1, 0xbf, 0x53, 0xfc, 0x08, 0x80, 0xd3, 0xf8,
	0x30, 0xf8, 0x84, 0x13, 0x47, 0x4d, 0x82, 0x7c, 0x96, 0xe0, 0x31, 0x1c, 0x7d, 0x0b, 0x95, 0x40,
	0xd8, 0x5c, 0x68, 0xe9, 0x85, 0x0c, 0xec, 0x24, 0x41, 0x6e, 0x9c, 0xfa, 0x9a, 0x5d, 0xcc, 0xb4,
	0xf1, 0x08, 0xde, 0xfc, 0xd9, 0x00, 0x53, 0xcd, 0x4e, 0xb4, 0x05, 0x25, 0xea, 0x0b, 0xc2, 0x67,
	0xb6, 0xa7, 0xd3, 0x77, 0xce, 0xf6, 0x63, 0x68, 0x38, 0xc8, 0xd4, 0x59, 0xdf, 0x23, 0xdc, 0x21,
	0xbe, 0x38, 0xb3, 0x82, 0x49, 0x05, 0x69, 0x4a, 0xf3, 0x11, 0xd4, 0xd2, 0x43, 0x2b, 0x3c, 0x3a,
	0x8e, 0x47, 0xc7, 0x43, 0xad, 0x44, 0x1e, 0x9d, 0x4e, 0xb8, 0xd0, 0x61, 0xfe, 0x6b, 0x3a, 0xc2,
	0xca, 0xda, 0xfc, 0xbb, 0x06, 0x95, 0xc4, 0x32, 0xda, 0x00, 0x93, 0xf8, 0xf2, 0x42, 0x31, 0x96,
	0x8e, 0x36, 0x8d, 0x0c, 0xef, 0xae, 0x31, 0x11, 0x9c, 0x3a, 0xb1, 0xf2, 0x74, 0xac, 0xd6, 0x8e,
	0xb4, 0xea, 0xc0, 0x1a, 0x8b, 0xb6, 0xc0, 0x9c, 0x30, 0x8f, 0x3a, 0x27, 0xba, 0xda, 0x37, 0x16,
	0x59, 0x03, 0x4e, 0x47, 0x23, 0xc2, 0xf7, 0x24, 0x08, 0x6b, 0x30, 0x7a, 0x0a, 0x20, 0x8e, 0x38,
	0x13, 0xc2, 0xa3, 0xfe, 0x48, 0x97, 0xfa, 0xd3, 0x45, 0xaa, 0xfc, 0x1e, 0xc4, 0x30, 0x9c, 0xa0,
	0x34, 0xfe, 0x32, 0x60, 0x35, 0x29, 0x08, 0xad, 0x83, 0x79, 0x4c, 0x7d, 0x97, 0x1d, 0x2f, 0x2f,
	0x9a, 0x06, 0xa6, 0x9b, 0x35, 0xf7, 0x61, 0xcd, 0xda, 0x86, 0x9a, 0xba, 0x63, 0x5f, 0x44, 0xbd,
	0x92, 0x5f, 0x16, 0x76, 0x81, 0xd0, 0xf8, 0xcd, 0x84, 0x6a, 0x2a, 0x3b, 0xa8, 0x0b, 0x65, 0xc2,
	0x39, 0xe3, 0xe1, 0x48, 0xd1, 0xdb, 0xb8, 0x73, 0x6e, 0x3e, 0x5b, 0xdd, 0x08, 0x8e, 0xe7, 0x4c,
	0xb4, 0x0d, 0xa5, 0xc0, 0x63, 0xc7, 0xd2, 0x8b, 0xda, 0xd6, 0x17, 0xe7, 0x7b, 0xe9, 0x6b, 0x34,
	0x8e, 0x79, 0x8d, 0x7f, 0xf2, 0x50, 0x8e, 0x9d, 0x5f, 0xa8, 0x9f, 0x06, 0x70, 0x9d, 0x93, 0x9f,
	0xa6, 0x24, 0x10, 0xaf, 0x98, 0x37, 0x1d, 0x93, 0xc1, 0x11, 0x27, 0xc1, 0x11, 0xf3, 0xdc, 0x4c,
	0xa9, 0x3e, 0x83, 0x8b, 0xbe, 0x4e, 0xa6, 0x48, 0xa5, 0xfc, 0xff, 0xa7, 0x1c, 0x25, 0x4b, 0x36,
	0x4f, 0xcb, 0x3e, 0x94, 0x82, 0x09, 0x71, 0xa8, 0xed, 0x05, 0xfa, 0xb1, 0xba, 0x95, 0x31, 0xb9,
	0xad, 0xbe, 0xe2, 0xe9, 0xde, 0x8f, 0xdd, 0x34, 0xfe, 0x30, 0xa0, 0x9a, 0xb2, 0xa1, 0xaf, 0xf4,
	0xc3, 0x33, 0xcb, 0xe4, 0x57, 0xef, 0xd0, 0x6f, 0x00, 0xa4, 0xc6, 0x0e, 0x73, 0x49, 0x60, 0xe5,
	0xa4, 0xb0, 0xf7, 0x6e, 0xe9, 0xe1, 0xa6, 0xa2, 0x25, 0xe0, 0x1f, 0x91, 0x8e, 0xc6, 0xef, 0x06,
	0x94, 0xa2, 0xc2, 0x5f, 0xa8, 0xc0, 0xf7, 0xa1, 0x38, 0xb6, 0xdf, 0x61, 0xb1, 0xfc, 0x92, 0x50,
	0x38, 0xf4, 0x28, 0xd1, 0x97, 0x19, 0xb4, 0xce, 0x9b, 0xf1, 0xdf, 0x02, 0xac, 0x2d, 0x0c, 0x03,
	0xb4, 0x0f, 0xd7, 0x1c, 0xe6, 0xb9, 0xdb, 0xc4, 0x63, 0xc7, 0x83, 0xa9, 0x4f, 0x9e, 0xb1, 0x63,
	0x3f, 0x71, 0x6e, 0xce, 0xf5, 0xfc, 0x7e, 0x26, 0xda, 0x81, 0x2b, 0x29, 0xc3, 0xc1, 0x24, 0x71,
	0x84, 0xce, 0x75, 0xf8, 0x3e, 0x5e, 0xa4, 0xb0, 0x3d, 0x64, 0x33, 0x92, 0x52, 0x98, 0xcf, 0xa8,
	0xf0, 0x14, 0x33, 0x52, 0x18, 0x1b, 0xb4, 0xc2, 0x42, 0x46, 0x85, 0x0b, 0x3c, 0xd4, 0x87, 0xeb,
	0xf2, 0xef, 0x72, 0x7c, 0xbc, 0x06, 0x4c, 0x59, 0xf5, 0xf5, 0x79, 0xae, 0xc7, 0x33, 0xa8, 0xe1,
	0x1b, 0xe2, 0xcd, 0xd4, 0x1d, 0x91, 0xf8, 0x0d, 0x61, 0x2e, 0x7d, 0x43, 0xa4, 0xf0, 0xe8, 0x29,
	0xac, 0x0a, 0xe9, 0x6a, 0x8f, 0x70, 0xca, 0x5c, 0xf9, 0x1f, 0x6e, 0x89, 0x96, 0x14, 0x01, 0x75,
	0xa0, 0x26, 0x74, 0xd6, 0xb4, 0x8b, 0xd2, 0x72, 0x17, 0x0b, 0x94, 0xa1, 0x29, 0x41, 0x0f, 0xfe,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x09, 0xad, 0x9c, 0x23, 0x55, 0x10, 0x00, 0x00,
}
